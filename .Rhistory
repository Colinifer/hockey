names(scrape) %>%
lapply(
tic(x)
dbWriteTable(
con,
value = as.data.frame(scrape[grep(x, names(scrape))]),
name = paste0(table_names[grep(x, table_names)], "_test"), # remove test once proven
append = TRUE
)
print(glue::glue("Successfully added ", x))
toc()
)
}
if (length(names(pbp_scrape)) != 9) {
print("Error, the list has a longer length than 9")
}
dbDisconnect(con)
}
toc()
toc()
toc()
toc()
toc()
toc()
toc()
table_names
names(scrape)
names(pbp_scrape)
# Packages & Init Setup ---------------------------------------------------
proj_name <- "hockey"
# devtools::install_github('bbc/bbplot')
pkgs <- c(
"devtools",
"tidyverse",
"RMariaDB",
"DBI",
"readr",
"pander",
"na.tools",
"ggimage",
"devtools",
"teamcolors",
"glue",
"dplyr",
"RCurl",
"tictoc",
"animation",
"gt",
"DT",
"ggthemes",
"bbplot",
"ggtext",
"ggforce",
"ggridges",
"ggrepel",
"ggbeeswarm",
"extrafont",
"RCurl",
"xml2",
"rvest",
"jsonlite",
"foreach",
"lubridate",
"snakecase",
"nhlapi"
)
installed_packages <- pkgs %in%
rownames(installed.packages())
if (any(installed_packages == FALSE)) {
install.packages(pkgs[!installed_packages])
}
if (any("bbplot" %in%
rownames(installed.packages()) == FALSE)) {
library(devtools)
devtools::install_github('bbc/bbplot')
}
invisible(lapply(pkgs, library, character.only = TRUE))
rm(pkgs, installed_packages)
# Initialize Working Directory --------------------------------------------
source("../initR/init.R")
fx.setdir(proj_name)
# Create standard objects -------------------------------------------------
f.con <- "../initR/con.R"
source(f.con)
dbListTables(con)
dbDisconnect(con)
userYear <- substr(Sys.Date(), 1, 4)
userDate <- Sys.Date()
today <- format(Sys.Date(), "%Y-%d-%m")
source("EH_scrape_functions.R")
# If scrape isn't caught up
# u.scrape_interval <- 250
# source("playground/addToTable.R")
pbp_scrape <- readRDS("data/pbp_scrape3.rds")
pbp_scrape$report$game_id %>% min()
table_names
names(pbp_scrape)
x <- "game_info_df"
tic(paste(scrape[grep(x, names(scrape))]))
tic(pastepbp_(scrape[grep(x, names(pbp_scrape))]))
tic(paste(pbp_scrape[grep(x, names(pbp_scrape))]))
toc()
grep(x, names(scrape)
)
grep(x, names(pbp_scrape))
grepl(x, names(pbp_scrape))
names(scrape[grep(x, names(scrape))])
scrape[grep(x, names(scrape))]
pbp_scrape[grep(x, names(pbp_scrape))]
pbp_scrape[x]
pbp_scrape [1%>% names()
pbp_scrape[1] %>% names()
pbp_scrape[grep(x, names(pbp_scrape))] %>% names()
pbp_scrape[
grep(x,
pbp_scrape %>%
names()
)
] %>%
names()
{
source(f.con)
table_names <- dbListTables(con)
return(table_names)
if (length(names(scrape)) == 9) {
print("Hello")
tic("Total Upload")
fx.scrape_upload <- function(x) {
tic(
scrape[
grep(x,
scrape %>%
names()
)
] %>%
names()
)
dbWriteTable(
con,
value = as.data.frame(scrape[grep(x, names(scrape))]),
name = paste0(table_names[grep(x, table_names)], "_test"),
# remove test once proven
append = TRUE
)
print(glue::glue("Successfully added ", x, "_test"))
toc()
}
# for (i in names(scrape)) {
#   tic(scrape)
#   dbWriteTable(
#     con,
#     value = as.data.frame(scrape[grep(i, names(scrape))]),
#     name = paste0(table_names[grep(i, table_names)], "_test"),
#     # remove test once proven
#     append = TRUE
#   )
#   print(glue::glue("Successfully added ", i, "_test"))
#   toc()
# }
names(scrape) %>%
lapply(fx.scrape_upload)
}
if (length(names(scrape)) != 9) {
print("Error, the list has a longer length than 9")
}
dbDisconnect(con)
}
as.data.frame(pbp_scrape[grep(x, names(pbp_scrape))])
paste0(table_names[grep(x, table_names)], "_test")
x
table_names[grep(x, table_names)]
grep(x, pbp_scrape %>% names())
table_names[grep(x, table_names %>% names())]
table_names[1]
grep(x, table_names %>% names())
x
names(pbp_scrape)
pbp_scrape[1] %>% names()
length(pbp_scrape[1] %>% names())
pbp_scrape[1] %>% names()
nchar(pbp_scrape[1] %>% names())
nchar(pbp_scrape[1] %>% names())-3
pbp_scrape[1] %>% names() %>% substr(1, nchar(pbp_scrape[1] %>% names())-3)
pbp_scrape[3] %>% names()
pbp_scrape %>% names()
pbp_scrape[1] %>% names() <- pbp_scrape[1] %>% names() %>% substr(1, nchar(pbp_scrape[1] %>% names())-3)
pbp_scrape[6] %>% names() <- pbp_scrape[6] %>% names() %>% substr(1, nchar(pbp_scrape[6] %>% names())-3)
pbp_scrape[7] %>% names() <- pbp_scrape[7] %>% names() %>% substr(1, nchar(pbp_scrape[7] %>% names())-3)
pbp_scrape[8] %>% names() <- pbp_scrape[8] %>% names() %>% substr(1, nchar(pbp_scrape[8] %>% names())-3)
pbp_scrape[8] %>% names()
names(pbp_scrape[1]) <- pbp_scrape[1] %>% names() %>% substr(1, nchar(pbp_scrape[1] %>% names())-3)
names(pbp_scrape[1])
pbp_scrape[1] %>% names() %>% substr(1, nchar(pbp_scrape[1] %>% names())-3)
names(pbp_scrape[1])
names(pbp_scrape[1])
names(pbp_scrape)[1]
names(pbp_scrape)[1] <- pbp_scrape[1] %>% names() %>% substr(1, nchar(pbp_scrape[1] %>% names())-3)
names(pbp_scrape)[1]
names(pbp_scrape)[6] <- pbp_scrape[6] %>% names() %>% substr(1, nchar(pbp_scrape[6] %>% names())-3)
names(pbp_scrape)[7] <- pbp_scrape[7] %>% names() %>% substr(1, nchar(pbp_scrape[7] %>% names())-3)
names(pbp_scrape)[8] <- pbp_scrape[8] %>% names() %>% substr(1, nchar(pbp_scrape[8] %>% names())-3)
pbp_scrape %>% names()
scrape[grep(x, names(scrape))]
table_names[grep(x, table_names %>% names())]
grep(x, table_names %>% names())
x
x <- names(pbp_scrape)[1]
x
grep(x, table_names %>% names())
table_names
table_names[grep(x, table_names %>% names())]
table_names[grep(x, table_names)]
grep(x, table_names)
pbp_scrape[grep(x, names(pbp_scrape))])
pbp_scrape[grep(x, names(pbp_scrape))]
paste0(table_names[grep(x, table_names)], "_test")
fx.add_to_table <- function(scrape) {
source(f.con)
table_names <- dbListTables(con)
return(table_names)
if (length(names(scrape)) == 9) {
print("Hello")
tic("Total Upload")
fx.scrape_upload <- function(x) {
tic(
scrape[
grep(x,
scrape %>%
names()
)
] %>%
names()
)
dbWriteTable(
con,
value = as.data.frame(scrape[grep(x, names(scrape))]),
name = paste0(table_names[grep(x, table_names)], "_test"),
# remove test once proven
append = TRUE
)
print(glue::glue("Successfully added ", x, "_test"))
toc()
}
# for (i in names(scrape)) {
#   tic(scrape)
#   dbWriteTable(
#     con,
#     value = as.data.frame(scrape[grep(i, names(scrape))]),
#     name = paste0(table_names[grep(i, table_names)], "_test"),
#     # remove test once proven
#     append = TRUE
#   )
#   print(glue::glue("Successfully added ", i, "_test"))
#   toc()
# }
names(scrape) %>%
lapply(fx.scrape_upload)
}
if (length(names(scrape)) != 9) {
print("Error, the list has a longer length than 9")
}
dbDisconnect(con)
}
fx.add_to_table(pbp_scrape)
fx.add_to_table <- function(scrape) {
source(f.con)
table_names <- dbListTables(con)
if (length(names(scrape)) == 9) {
print("Hello")
tic("Total Upload")
fx.scrape_upload <- function(x) {
tic(
scrape[
grep(x,
scrape %>%
names()
)
] %>%
names()
)
dbWriteTable(
con,
value = as.data.frame(scrape[grep(x, names(scrape))]),
name = paste0(table_names[grep(x, table_names)], "_test"),
# remove test once proven
append = TRUE
)
print(glue::glue("Successfully added ", x, "_test"))
toc()
}
# for (i in names(scrape)) {
#   tic(scrape)
#   dbWriteTable(
#     con,
#     value = as.data.frame(scrape[grep(i, names(scrape))]),
#     name = paste0(table_names[grep(i, table_names)], "_test"),
#     # remove test once proven
#     append = TRUE
#   )
#   print(glue::glue("Successfully added ", i, "_test"))
#   toc()
# }
names(scrape) %>%
lapply(fx.scrape_upload)
}
if (length(names(scrape)) != 9) {
print("Error, the list has a longer length than 9")
}
dbDisconnect(con)
}
fx.add_to_table <- function(scrape) {
source(f.con)
table_names <- dbListTables(con)
if (length(names(scrape)) == 9) {
print("Hello")
tic("Total Upload")
fx.scrape_upload <- function(x) {
tic(
scrape[
grep(x,
scrape %>%
names()
)
] %>%
names()
)
dbWriteTable(
con,
value = as.data.frame(scrape[grep(x, names(scrape))]),
name = paste0(table_names[grep(x, table_names)], "_test"),
# remove test once proven
append = TRUE
)
print(glue::glue("Successfully added ", x, "_test"))
toc()
}
# for (i in names(scrape)) {
#   tic(scrape)
#   dbWriteTable(
#     con,
#     value = as.data.frame(scrape[grep(i, names(scrape))]),
#     name = paste0(table_names[grep(i, table_names)], "_test"),
#     # remove test once proven
#     append = TRUE
#   )
#   print(glue::glue("Successfully added ", i, "_test"))
#   toc()
# }
names(scrape) %>%
lapply(fx.scrape_upload)
}
if (length(names(scrape)) != 9) {
print("Error, the list has a longer length than 9")
}
dbDisconnect(con)
}
fx.add_to_table(pbp_scrape)
con
dbListTables(con)
list.files(path = "data/")
list.files(path = "data/")[21:23]
path.expand(list.files(path = "data/")[21])
?path.expand
f.scrape <- list.files(path = "data/")[21:23]
f.scrape <- list.files(path = "data/")[21:23] %>% path.expand()
f.scrape <- list.files(path = "data/")[21:23] %>% path.expand(~/)
path.expand(~/data)
path.expand("~/data")
list.files(path = "data/", pattern = "pbp_scrape")
list.files(path = "data/", pattern = "pbp_scrape[:digit:]")
list.files(path = "data/", pattern = "pbp_scrape"[:digit:])
list.files(pattern = "pbp_scrape")
list.files(path = "data/", pattern = "pbp_scrape") %>% path.expand()
path.expand(f.scrape)
path.expand(path = list.files(path = "data/")[21])
f.scrape <- paste0(f.scrape, "data/")
paste0("data/", list.files(path = "data/", pattern = "pbp_scrape"))
f.scrape <- paste0("data/", list.files(path = "data/", pattern = "pbp_scrape"))
f.scrape[4:5]
f.scrape[3:5]
fx.clean_scrape <- function(x) {
y <- readRDS(x)
y[grep("_df", names(y))]
names(y)[1] <- y[1] %>% names() %>% substr(1, nchar(y[1] %>% names())-3)
names(y)[6] <- y[6] %>% names() %>% substr(1, nchar(y[6] %>% names())-3)
names(y)[7] <- y[7] %>% names() %>% substr(1, nchar(y[7] %>% names())-3)
names(y)[8] <- y[8] %>% names() %>% substr(1, nchar(y[8] %>% names())-3)
saveRDS(y, x)
}
f.scrape[3:5]
f.scrape[3]
fx.clean_scrape(f.scrape[3])
readRDS(f.scrape[3])
pbp_scrape <- readRDS(f.scrape[3])
pbp_scrape %>% names()
f.scrape[1:5]
f.scrape
rm(pbp_scrape)
# Packages & Init Setup ---------------------------------------------------
proj_name <- "hockey"
# setwd("~/Documents/dev/hockey")
# devtools::install_github('bbc/bbplot')
pkgs <- c(
"devtools",
"tidyverse",
"RMariaDB",
"DBI",
"readr",
"pander",
"na.tools",
"ggimage",
"devtools",
"teamcolors",
"glue",
"dplyr",
"RCurl",
"tictoc",
"animation",
"gt",
"DT",
"ggthemes",
"bbplot",
"ggtext",
"ggforce",
"ggridges",
"ggrepel",
"ggbeeswarm",
"extrafont",
"RCurl",
"xml2",
"rvest",
"jsonlite",
"foreach",
"lubridate",
"snakecase",
"nhlapi"
)
installed_packages <- pkgs %in%
rownames(installed.packages())
if (any(installed_packages == FALSE)) {
install.packages(pkgs[!installed_packages])
}
if (any("bbplot" %in%
rownames(installed.packages()) == FALSE)) {
library(devtools)
devtools::install_github('bbc/bbplot')
}
invisible(lapply(pkgs, library, character.only = TRUE))
rm(pkgs, installed_packages)
# Initialize Working Directory --------------------------------------------
source("../initR/init.R")
fx.setdir(proj_name)
# Create standard objects -------------------------------------------------
f.con <- "../initR/con.R"
source(f.con)
dbListTables(con)
dbDisconnect(con)
userYear <- substr(Sys.Date(), 1, 4)
userDate <- Sys.Date()
today <- format(Sys.Date(), "%Y-%d-%m")
source("EH_scrape_functions.R")
source("functions/add_to_table.R")
f.scrape <- paste0("data/", list.files(path = "data/", pattern = "pbp_scrape"))
f.scrape[3:5] %>% lapply(fx.add_to_table)
fx.add_to_table <- function(fscrape) {
scrape <- readRDS(fscrape)
source(f.con)
table_names <- dbListTables(con)
if (length(names(scrape)) == 9) {
print("Hello")
tic("Total Upload")
fx.scrape_upload <- function(x) {
tic(
scrape[
grep(x,
scrape %>%
names()
)
] %>%
names()
)
print(glue::glue("Uploading ", x))
# print(glue::glue("Uploading ", x, "_test"))
dbWriteTable(
con,
value = as.data.frame(scrape[grep(x, names(scrape))]),
name = paste0(table_names[grep(x, table_names)]),
# name = paste0(table_names[grep(x, table_names)], "_test"),
# remove test once proven
append = TRUE
)
print(glue::glue("Successfully added ", x))
# print(glue::glue("Successfully added ", x, "_test"))
toc()
}
names(scrape) %>%
lapply(fx.scrape_upload)
}
if (length(names(scrape)) != 9) {
print("Error, the list has a longer length than 9")
}
rm(scrape)
dbDisconnect(con)
}
f.scrape[3] %>% lapply(fx.add_to_table)
f.scrape[3]
scrape <- readRDS(f.scrape[3])
scrape$game_info$game_id %>% unique
scrape$game_info$game_id[1054]
scrape$game_info$game_id[1050:1060]
scrape$game_info$game_id %>% class
scrape$game_info$game_id %>% class()
