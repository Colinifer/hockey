#   ),
#   name = "schedule",
#   append = TRUE
# )
# dbWriteTable(con, value = dbReadTable(con, "2019schedule"), name = "schedule", append = TRUE)
source("../initR/con.R")
schedule <- dbGetQuery(
con,
"SELECT * FROM `hockey`.`schedule` WHERE (`season` > '2009') AND (`game_status` = 'Final') ORDER BY `game_id`"
)
dbDisconnect(con)
game_ids <- schedule %>%
filter(season > 2009) %>%
select(game_id) %>%
pull(game_id)
# game_ids <- game_ids$game_id
# dbWriteTable(
#   con,
#   value = sc.scrape_schedule(
#     start_date = as.Date('2019-10-02'),
#     end_date =   Sys.Date() + 20
#   ),
#   name = "schedule"
#   # append = TRUE
# )
# Get existing Game IDs from DB
source("../initR/con.R")
existing_game_ids <- unique(dbGetQuery(con, "SELECT game_id FROM pbp_base;"))
dbDisconnect(con)
id_latest <- grep(existing_game_ids$game_id[nrow(existing_game_ids)], game_ids)
id_latest <- grep("2012020345", game_ids)
# Create int of latest IDs
# id_latest <- as.integer(
#   substr(
#   existing_game_ids$game_id[nrow(existing_game_ids)],
#   7,
#   nchar(existing_game_ids$game_id[nrow(existing_game_ids)])
#   )
# )
tic("Total scrape")
pbp_scrape <-
sc.scrape_pbp(games = game_ids[(id_latest + 1):(id_latest + u.scrape_interval)]) # 300 was last
source("../initR/con.R")
fx.append <- function(x){
dbApp
}
qry_list <- names(pbp_scrape)
tic("Total Upload")
tic("game_info")
dbWriteTable(
con,
value = pbp_scrape$game_info_df,
name = "game_info",
append = TRUE
)
print("Successfully added game_info")
toc()
tic("pbp_base")
dbWriteTable(
con,
value = pbp_scrape$pbp_base,
name = "pbp_base",
append = TRUE
)
print("Successfully added pbp_base")
toc()
tic("pbp_extras")
dbWriteTable(
con,
value = pbp_scrape$pbp_extras,
name = "pbp_extras",
append = TRUE
)
print("Successfully added pbp_extras")
toc()
tic("player_shifts")
dbWriteTable(
con,
value = pbp_scrape$player_shifts,
name = "player_shifts",
append = TRUE
)
print("Successfully added player_shifts")
toc()
tic("player_periods")
dbWriteTable(
con,
value = pbp_scrape$player_periods,
name = "player_periods",
append = TRUE
)
print("Successfully added player_periods")
toc()
tic("roster")
dbWriteTable(
con,
value = pbp_scrape$roster_df,
name = "roster",
append = TRUE)
print("Successfully added roster")
toc()
tic("scratches")
dbWriteTable(
con,
value = pbp_scrape$scratches_df,
name = "scratches",
append = TRUE)
print("Successfully added scratches")
toc()
tic("events_summary")
dbWriteTable(
con,
value = pbp_scrape$events_summary_df,
name = "events_summary",
append = TRUE
)
print("Successfully added events_summary")
toc()
tic("report")
dbWriteTable(
con,
value = pbp_scrape$report,
name = "report",
append = TRUE)
print("Successfully added report")
toc()
print("Successfully uploaded latest scrape to DB!")
toc()
toc()
dbDisconnect(con)
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
library(shiny)
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("Old Faithful Geyser Data"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
sliderInput("bins",
"Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot")
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$distPlot <- renderPlot({
# generate bins based on input$bins from ui.R
x    <- faithful[, 2]
bins <- seq(min(x), max(x), length.out = input$bins + 1)
# draw the histogram with the specified number of bins
hist(x, breaks = bins, col = 'darkgray', border = 'white')
})
}
# Run the application
shinyApp(ui = ui, server = server)
pkgs <- c(
"devtools",
"tidyverse",
"RMariaDB",
"DBI",
"readr",
"pander",
"na.tools",
"ggimage",
"devtools",
"teamcolors",
"glue",
"dplyr",
"RCurl",
"tictoc",
"animation",
"gt",
"DT",
"ggthemes",
"bbplot",
"ggtext",
"ggforce",
"ggridges",
"ggrepel",
"ggbeeswarm",
"extrafont",
"RCurl",
"xml2",
"rvest",
"jsonlite",
"foreach",
"lubridate",
"snakecase",
"nhlapi"
)
"bbplot" %in%
rownames(installed.packages())
proj_name <- "hockey"
pkgs <- c(
"devtools",
"tidyverse",
"RMariaDB",
"DBI",
"readr",
"pander",
"na.tools",
"ggimage",
"devtools",
"teamcolors",
"glue",
"dplyr",
"RCurl",
"tictoc",
"animation",
"gt",
"DT",
"ggthemes",
"bbplot",
"ggtext",
"ggforce",
"ggridges",
"ggrepel",
"ggbeeswarm",
"extrafont",
"RCurl",
"xml2",
"rvest",
"jsonlite",
"foreach",
"lubridate",
"snakecase",
"nhlapi"
)
installed_packages <- pkgs %in%
rownames(installed.packages())
if (any(installed_packages == FALSE)) {
install.packages(pkgs[!installed_packages])
} if (any("bbplot" %in%
rownames(installed.packages()) == FALSE)) {
library(devtools)
devtools::install_github('bbc/bbplot')
}
invisible(lapply(pkgs, library, character.only = TRUE))
rm(pkgs, installed_packages)
if (any("bbplot" %in%
rownames(installed.packages()) == FALSE)) {
library(devtools)
devtools::install_github('bbc/bbplot')
}
proj_name <- "hockey"
pkgs <- c(
"devtools",
"tidyverse",
"RMariaDB",
"DBI",
"readr",
"pander",
"na.tools",
"ggimage",
"devtools",
"teamcolors",
"glue",
"dplyr",
"RCurl",
"tictoc",
"animation",
"gt",
"DT",
"ggthemes",
"bbplot",
"ggtext",
"ggforce",
"ggridges",
"ggrepel",
"ggbeeswarm",
"extrafont",
"RCurl",
"xml2",
"rvest",
"jsonlite",
"foreach",
"lubridate",
"snakecase",
"nhlapi"
)
installed_packages <- pkgs %in%
rownames(installed.packages())
if (any(installed_packages == FALSE)) {
install.packages(pkgs[!installed_packages])
} if (any("bbplot" %in%
rownames(installed.packages()) == FALSE)) {
library(devtools)
devtools::install_github('bbc/bbplot')
}
invisible(lapply(pkgs, library, character.only = TRUE))
rm(pkgs, installed_packages)
proj_name <- "hockey"
pkgs <- c(
"devtools",
"tidyverse",
"RMariaDB",
"DBI",
"readr",
"pander",
"na.tools",
"ggimage",
"devtools",
"teamcolors",
"glue",
"dplyr",
"RCurl",
"tictoc",
"animation",
"gt",
"DT",
"ggthemes",
"bbplot",
"ggtext",
"ggforce",
"ggridges",
"ggrepel",
"ggbeeswarm",
"extrafont",
"RCurl",
"xml2",
"rvest",
"jsonlite",
"foreach",
"lubridate",
"snakecase",
"nhlapi"
)
installed_packages <- pkgs %in%
rownames(installed.packages())
if (any(installed_packages == FALSE)) {
install.packages(pkgs[!installed_packages])
} if (any("bbplot" %in%
rownames(installed.packages()) == FALSE)) {
library(devtools)
devtools::install_github('bbc/bbplot')
}
invisible(lapply(pkgs, library, character.only = TRUE))
rm(pkgs, installed_packages)
else (any("bbplot" %in%
rownames(installed.packages()) == FALSE)) {
library(devtools)
devtools::install_github('bbc/bbplot')
}
installed_packages <- pkgs %in%
rownames(installed.packages())
if (any(installed_packages == FALSE)) {
install.packages(pkgs[!installed_packages])
} else (any("bbplot" %in%
rownames(installed.packages()) == FALSE)) {
library(devtools)
devtools::install_github('bbc/bbplot')
}
installed_packages <- pkgs %in%
rownames(installed.packages())
if (any(installed_packages == FALSE)) {
install.packages(pkgs[!installed_packages])
} else_if (any("bbplot" %in%
rownames(installed.packages()) == FALSE)) {
library(devtools)
devtools::install_github('bbc/bbplot')
}
?if
()
?ifelse
?if
()
?if (condition) {
}
rownames(installed.packages())
rownames(installed.packages()) == FALSE
"bbplot" %in%
rownames(installed.packages()) == FALSE
installed_packages <- pkgs %in%
rownames(installed.packages())
if (any(installed_packages == FALSE)) {
install.packages(pkgs[!installed_packages])
} else_if (any("bbplot" %in%
rownames(installed.packages()) == FALSE)) {
library(devtools)
devtools::install_github('bbc/bbplot')
}
invisible(lapply(pkgs, library, character.only = TRUE))
rm(pkgs, installed_packages)
proj_name <- "hockey"
pkgs <- c(
"devtools",
"tidyverse",
"RMariaDB",
"DBI",
"readr",
"pander",
"na.tools",
"ggimage",
"devtools",
"teamcolors",
"glue",
"dplyr",
"RCurl",
"tictoc",
"animation",
"gt",
"DT",
"ggthemes",
"bbplot",
"ggtext",
"ggforce",
"ggridges",
"ggrepel",
"ggbeeswarm",
"extrafont",
"RCurl",
"xml2",
"rvest",
"jsonlite",
"foreach",
"lubridate",
"snakecase",
"nhlapi"
)
installed_packages <- pkgs %in%
rownames(installed.packages())
if (any(installed_packages == FALSE)) {
install.packages(pkgs[!installed_packages])
} else_if (any("bbplot" %in%
rownames(installed.packages()) == FALSE)) {
library(devtools)
devtools::install_github('bbc/bbplot')
}
invisible(lapply(pkgs, library, character.only = TRUE))
rm(pkgs, installed_packages)
installed_packages <- pkgs %in%
rownames(installed.packages())
if (any(installed_packages == FALSE)) {
install.packages(pkgs[!installed_packages])
}
if (any("bbplot" %in%
rownames(installed.packages()) == FALSE)) {
library(devtools)
devtools::install_github('bbc/bbplot')
}
invisible(lapply(pkgs, library, character.only = TRUE))
rm(pkgs, installed_packages)
proj_name <- "hockey"
pkgs <- c(
"devtools",
"tidyverse",
"RMariaDB",
"DBI",
"readr",
"pander",
"na.tools",
"ggimage",
"devtools",
"teamcolors",
"glue",
"dplyr",
"RCurl",
"tictoc",
"animation",
"gt",
"DT",
"ggthemes",
"bbplot",
"ggtext",
"ggforce",
"ggridges",
"ggrepel",
"ggbeeswarm",
"extrafont",
"RCurl",
"xml2",
"rvest",
"jsonlite",
"foreach",
"lubridate",
"snakecase",
"nhlapi"
)
installed_packages <- pkgs %in%
rownames(installed.packages())
if (any(installed_packages == FALSE)) {
install.packages(pkgs[!installed_packages])
}
if (any("bbplot" %in%
rownames(installed.packages()) == FALSE)) {
library(devtools)
devtools::install_github('bbc/bbplot')
}
invisible(lapply(pkgs, library, character.only = TRUE))
rm(pkgs, installed_packages)
unlink('~/Documents/dev/football/inspo/guga:caseb/beginners_guide_cache', recursive = TRUE)
unlink('~/Documents/dev/football/inspo/guga:caseb/beginners_guide_cache', recursive = TRUE)
library(yaml)
install.packages("yaml")
install.packages("rmarkdown")
install.packages("knitr")
install.packages("knitr")
