## Verify no additional rows created from join
if (sum(return_joined$check) > 0) {
warning("Multiple Players with Same Name 'player_upper' Name Present")
break()
}
## Ensure database friendly column names
colnames(return_joined) <- tolower(colnames(return_joined))
return(
return_joined %>%
select(-check)
)
}
## Scrape & Process NHL Player Info (API)  *** testing ***
sc.player_bios_API <- function(season_id_fun) {
## Note: the "snakecase" package is required to run this function
## it is not included as a dependency since this function is currently in testing
start_ <- 0
end_ <- 0
hold_skater_bios_regular <- jsonlite::fromJSON(
paste0(
"https://api.nhle.com/stats/rest/en/skater/bios?",
"isAggregate=false",
"&isGame=false",
"&sort=%5B%7B%22property%22:%22lastName%22,%22direction%22:%22ASC_CI%22%7D,%7B%22property%22:%22skaterFullName%22,%22direction%22:%22ASC_CI%22%7D%5D",
"&start=", start_,
"&limit=", end_,
"&factCayenneExp=gamesPlayed%3E=1",
"&cayenneExp=",
"gameTypeId=", 2,
"%20and%20seasonId%3C=", season_id_fun,
"%20and%20seasonId%3E=", season_id_fun
)
)
hold_skater_bios_playoffs <- jsonlite::fromJSON(
paste0(
"https://api.nhle.com/stats/rest/en/skater/bios?",
"isAggregate=false",
"&isGame=false",
"&sort=%5B%7B%22property%22:%22lastName%22,%22direction%22:%22ASC_CI%22%7D,%7B%22property%22:%22skaterFullName%22,%22direction%22:%22ASC_CI%22%7D%5D",
"&start=", start_,
"&limit=", end_,
"&factCayenneExp=gamesPlayed%3E=1",
"&cayenneExp=",
"gameTypeId=", 3,
"%20and%20seasonId%3C=", season_id_fun,
"%20and%20seasonId%3E=", season_id_fun
)
)
## Goalies
hold_goalie_bios_regular <- jsonlite::fromJSON(
paste0(
"https://api.nhle.com/stats/rest/en/goalie/bios?",
"isAggregate=false",
"&isGame=false",
"&sort=%5B%7B%22property%22:%22lastName%22,%22direction%22:%22ASC_CI%22%7D,%7B%22property%22:%22goalieFullName%22,%22direction%22:%22ASC_CI%22%7D%5D",
"&start=", start_,
"&limit=", end_,
"&factCayenneExp=gamesPlayed%3E=1",
"&cayenneExp=",
"gameTypeId=", 2,
"%20and%20seasonId%3C=", season_id_fun,
"%20and%20seasonId%3E=", season_id_fun
)
)
hold_goalie_bios_playoffs <- jsonlite::fromJSON(
paste0(
"https://api.nhle.com/stats/rest/en/goalie/bios?",
"isAggregate=false",
"&isGame=false",
"&sort=%5B%7B%22property%22:%22lastName%22,%22direction%22:%22ASC_CI%22%7D,%7B%22property%22:%22goalieFullName%22,%22direction%22:%22ASC_CI%22%7D%5D",
"&start=", start_,
"&limit=", end_,
"&factCayenneExp=gamesPlayed%3E=1",
"&cayenneExp=",
"gameTypeId=", 3,
"%20and%20seasonId%3C=", season_id_fun,
"%20and%20seasonId%3E=", season_id_fun
)
)
## Ensure playoffs are present in specified season
if (hold_skater_bios_playoffs$total > 0 & hold_goalie_bios_playoffs$total > 0) {
player_bios_df <- bind_rows(
hold_skater_bios_regular$data %>%  mutate(session = "R"),
hold_skater_bios_playoffs$data %>% mutate(session = "P"),
hold_goalie_bios_regular$data %>%  mutate(session = "R", positionCode = "G"),
hold_goalie_bios_playoffs$data %>% mutate(session = "P", positionCode = "G")
)
} else {
player_bios_df <- bind_rows(
hold_skater_bios_regular$data %>% mutate(session = "R"),
hold_goalie_bios_regular$data %>% mutate(session = "R", positionCode = "G")
)
}
## Combine and process player bios data
player_bios_df <- player_bios_df %>%
arrange(lastName) %>%
mutate(
season = season_id_fun,
fullName = ifelse(is.na(skaterFullName), goalieFullName, ifelse(is.na(goalieFullName), skaterFullName, NA))
) %>%
group_by(
playerId, fullName, lastName,
positionCode, shootsCatches,
season,
birthDate, birthCity, birthStateProvinceCode, birthCountryCode, nationalityCode,
draftYear, draftRound, draftOverall,
height, weight
) %>%
summarise() %>%
ungroup() %>%
arrange(lastName, fullName) %>%
rename_all(list(~snakecase::to_snake_case(.))) %>%
rename(
api_id = player_id,
position = position_code
) %>%
data.frame()
## Return data
return(
player_bios_df
)
}
## Scrape & Process Player Names Only (from HTM shifts source)  *** Non Essential / Testing ***
sc.get_names_combine <- function(games_vec) {
## Get names function (from html shifts data)
sc.get_names <- function(game, attempts) {
url_home_shifts <- NULL
try_count <-  attempts
while (!is.character(url_home_shifts) & try_count > 0) {
url_home_shifts <- try(
getURL(
paste0(
"http://www.nhl.com/scores/htmlreports/",
paste0(as.numeric(substr(game, 1, 4)), as.numeric(substr(game, 1, 4)) + 1),
"/TH0",
as.character(substr(game, 6, 10)),
".HTM"
)
)
)
try_count <- try_count - 1
}
url_away_shifts <- NULL
try_count <- attempts
while (!is.character(url_away_shifts) & try_count > 0) {
url_away_shifts <- try(
getURL(
paste0(
"http://www.nhl.com/scores/htmlreports/",
paste0(as.numeric(substr(game, 1, 4)), as.numeric(substr(game, 1, 4)) + 1),
"/TV0",
as.character(substr(game, 6, 10)),
".HTM"
)
)
)
try_count <- try_count - 1
}
## Pull out scraped shifts data
home_shifts_titles <- rvest::html_text(rvest::html_nodes(xml2::read_html(url_home_shifts), ".border"))
away_shifts_titles <- rvest::html_text(rvest::html_nodes(xml2::read_html(url_away_shifts), ".border"))
return_df <-
bind_rows(
data.frame(
num_last_first = home_shifts_titles[-1],
fullTeam =       home_shifts_titles[1],
stringsAsFactors = FALSE
),
data.frame(
num_last_first = away_shifts_titles[-1],
fullTeam =       away_shifts_titles[1],
stringsAsFactors = FALSE
)
) %>%
group_by(num_last_first) %>%
mutate(
firstName =  strsplit(gsub("^[0-9]+ ", "", num_last_first), ", ")[[1]][2],
lastName =   strsplit(gsub("^[0-9]+ ", "", num_last_first), ", ")[[1]][1],
player =     paste0(firstName, ".", lastName),
player_num = parse_number(num_last_first),
game_id =    game
) %>%
data.frame()
}
## Loop get names function
player_names <- foreach(i = 1:length(games_vec), .combine = bind_rows) %do% {
print(games_vec[i])
hold_df <- try(sc.get_names(game = games_vec[i], attempts = 3), silent = TRUE)
if (class(hold_df) == "data.frame") {
hold_df
} else {
data.frame(
num_last_first = character(),
fullTeam = character(),
firstName = character(),
lastName = character(),
player = character(),
player_num = numeric(),
game_id = character(),
stringsAsFactors = FALSE
)
}
}
## Return data
return(player_names)
}
## ------------------------------------------ ##
## *** Still in testing ***
## ------------------------ ##
##   Expand PBP Functions   ##
## ------------------------ ##
# Expand event information
sc.pbp_expand <- function(data) {
print("expand", quote = F)
hold <- data %>%
mutate(event_circle =
1 * (coords_x <= -25 & coords_y > 0) +
2 * (coords_x <= -25 & coords_y < 0) +
3 * (coords_x < 0 & coords_x > 25 & coords_y > 0) +
4 * (coords_x < 0 & coords_x > 25 & coords_y < 0) +
5 * (abs(coords_x) < 5 & abs(coords_y) < 5) +
6 * (coords_x > 0 & coords_x < 25 & coords_y > 0) +
7 * (coords_x > 0 & coords_x < 25 & coords_y < 0) +
8 * (coords_x >= 25 & coords_y > 0) +
9 * (coords_x >= 25 & coords_y < 0),
event_rinkside =
case_when(
coords_x <= -25 ~ "L",
coords_x > -25 & coords_x < 25 ~ "N",
coords_x >= 25 ~ "R"
),
home_zone = ifelse(event_team == away_team & event_zone == "Off", "Def",
ifelse(event_team == away_team & event_zone == "Def", "Off", event_zone)),
# Initial distance / angle calculation
pbp_distance = suppressWarnings(as.numeric(sub(".*Zone, *(.*?) * ft.*", "\\1", event_description))),
pbp_distance = ifelse(event_type %in% st.fenwick_events & is.na(pbp_distance), 0, pbp_distance),
event_distance = sqrt((89 - abs(coords_x))^2 + coords_y^2),
event_angle = abs(atan(coords_y / (89 - abs(coords_x))) * (180 / pi)),
# Update distance calc for long shots (and various mistakes)
event_distance = ifelse(event_type %in% st.fenwick_events & pbp_distance > 89 & coords_x < 0 &
event_detail != "Tip-In" & event_detail != "Wrap-around" & event_detail != "Deflected" & !(pbp_distance > 89 & event_zone == "Off"),
sqrt((abs(coords_x) + 89)^2 + coords_y^2),
ifelse(event_type %in% st.fenwick_events & pbp_distance > 89 & coords_x > 0 &
event_detail != "Tip-In" & event_detail != "Wrap-around" & event_detail != "Deflected" & !(pbp_distance > 89 & event_zone == "Off"),
sqrt((coords_x + 89)^2 + coords_y^2),
event_distance)),
event_angle = ifelse(event_type %in% st.fenwick_events & pbp_distance > 89 & coords_x < 0 &
event_detail != "Tip-In" & event_detail != "Wrap-around" & event_detail != "Deflected" & !(pbp_distance > 89 & event_zone == "Off"),
abs( atan(coords_y / (abs(coords_x) + 89)) * (180 / pi)),
ifelse(event_type %in% st.fenwick_events & pbp_distance > 89 & coords_x > 0 &
event_detail != "Tip-In" & event_detail != "Wrap-around" & event_detail != "Deflected" & !(pbp_distance > 89 & event_zone == "Off"),
abs(atan(coords_y / (coords_x + 89)) * (180 / pi)),
event_angle)),
# Flip event_zone for blocked shot errors / distance less than 64 feet
event_zone = ifelse(event_zone == "Def" & event_type == "BLOCK", "Off", event_zone),
event_zone = ifelse(event_type %in% st.fenwick_events & event_zone == "Def" & pbp_distance <= 64, "Off", event_zone)
)
print("face_ID", quote = F)
# Add home_zonestart for corsi events
face_index <- hold %>%
filter(event_type %in% c(st.corsi_events, "FAC"),
game_period < 5
) %>%
arrange(game_id, event_index) %>%
mutate(face_index = cumsum(event_type == "FAC")) %>%
group_by(game_id, face_index) %>%
arrange(event_index) %>%
mutate(test = first(home_zone),
home_zonestart = ifelse(first(home_zone) == "Def", 1,
ifelse(first(home_zone) == "Neu", 2,
ifelse(first(home_zone) == "Off", 3, NA)))
) %>%
ungroup() %>%
select(game_id, event_index, home_zonestart) %>%
data.frame()
# Join
print("join", quote = F)
print("---", quote = F)
hold <- hold %>%
left_join(face_index, by = c("game_id", "event_index")) %>%
data.frame()
}
# Add faceoff, penalty, and shift indexes
sc.pbp_index <- function(data) {
data <- pbp_base_new
# Add shift/face/pen indexes & shift IDs
print("index", quote = F)
pbp_hold <- data %>%
arrange(game_id, event_index) %>%
mutate(face_index =  cumsum(event_type == "FAC"),
shift_index = cumsum(event_type == "CHANGE"),
pen_index =   cumsum(event_type == "PENL")
) %>%
data.frame()
print("shift_ID", quote = F)
hold <- pbp_hold %>%
filter(event_type %in% c("CHANGE", ## testing
"FAC", "GOAL", "BLOCK", "SHOT", "MISS", "HIT", "TAKE", "GIVE", "PENL"
),
!(game_period == 5 & session == "R")
) %>%
group_by(game_id, game_period, season,
# home_on_1, home_on_2, home_on_3, home_on_4, home_on_5, home_on_6, home_on_7,
# away_on_1, away_on_2, away_on_3, away_on_4, away_on_5, away_on_6, away_on_7,
# home_goalie, away_goalie,
face_index, shift_index, pen_index
) %>%
#mutate(shift_ID = round(first(event_index) * as.numeric(game_id))) %>%
mutate(shift_ID =
paste0(
str_pad((as.numeric(substr(game_id, 3, 4)) + 1), 2, "left", pad = "0"),
".",
substr(game_id, 6, 10),
#paste0((as.numeric(substr(game_id, 3, 4)) + 1), ".", substr(game_id, 6, 10)),
".",
str_pad(first(event_index), 4, "left", pad = "0")
)
) %>%
summarise(shift_ID =     first(shift_ID),
shift_length = sum(event_length)
) %>%
ungroup() %>%
select(game_id, game_period, season, shift_ID, face_index, shift_index, pen_index, shift_length) %>%
data.frame()
print("join", quote = F)
print("---", quote = F)
join <- pbp_hold %>%
left_join(
hold,
by = c(
"game_id", "game_period", "season",
# "home_on_1", "home_on_2", "home_on_3", "home_on_4", "home_on_5", "home_on_6",
# "away_on_1", "away_on_2", "away_on_3", "away_on_4","away_on_5", "away_on_6",
# "home_goalie", "away_goalie",
"face_index", "shift_index", "pen_index"
)
) %>%
data.frame()
}
###########################
## ------------------------------------------ ##
sc.scrape_schedule(start_date = Sys.Date(), end_date = Sys.Date(), print_sched = TRUE)
sc.scrape_schedule(start_date = "2019-10-02", end_date = "2020-04-04", print_sched = TRUE)
schedule <- sc.scrape_schedule(start_date = "2019-10-02", end_date = "2020-04-04", print_sched = TRUE)
View(schedule)
write.csv(schedule, file = "2019schedule", row.names = FALSE)
write.csv(schedule, file = "2019schedule.csv", row.names = FALSE)
schedule <- sc.scrape_schedule(start_date = "2018-10-03", end_date = "2020-06-12", print_sched = TRUE)
write.csv(schedule, file = "2018schedule.csv", row.names = FALSE)
schedule <- sc.scrape_schedule(start_date = "2017-10-01", end_date = "2018-07-01", print_sched = TRUE)
write.csv(schedule, file = "2017schedule.csv", row.names = FALSE)
schedule <- sc.scrape_schedule(start_date = "2016-10-01", end_date = "2017-07-01", print_sched = TRUE)
write.csv(schedule, file = "2016schedule.csv", row.names = FALSE)
schedule <- sc.scrape_schedule(start_date = "2015-10-01", end_date = "2016-07-01", print_sched = TRUE)
write.csv(schedule, file = "2015schedule.csv", row.names = FALSE)
schedule <- sc.scrape_schedule(start_date = "2014-10-01", end_date = "2015-07-01", print_sched = TRUE)
write.csv(schedule, file = "2014schedule.csv", row.names = FALSE)
schedule <- sc.scrape_schedule(start_date = "2014-10-01", end_date = "2015-07-01", print_sched = TRUE)
write.csv(schedule, file = "2014schedule.csv", row.names = FALSE)
schedule <- sc.scrape_schedule(start_date = "2014-10-01", end_date = "2015-07-01", print_sched = TRUE)
tail(schedule)
?dbConnect()
?dbConnect
install.packages(default-libmysqlclient-dev )
userYear = 2005
userYear+=1
userYear = userYear + 1
userYear + 1
userYear = 2005
if (userYear <= 2019) {
schedule <- sc.scrape_schedule(start_date = paste(userYear, "-10-01", sep = ""), end_date = paste(userYear + 1, "-07-01", sep = ""), print_sched = TRUE)
write.csv(schedule, file = paste("schedule/", userYear, "schedule.csv", row.names = FALSE))
userYear = userYear + 1
}
paste("schedule/", userYear, "schedule.csv")
paste("schedule/", userYear, "schedule.csv", sep = "")
userYear = 2005
if (userYear <= 2019) {
schedule <- sc.scrape_schedule(start_date = paste(userYear, "-10-01", sep = ""), end_date = paste(userYear + 1, "-07-01", sep = ""), print_sched = TRUE)
write.csv(schedule, file = paste("schedule/", userYear, "schedule.csv", sep = ""), row.names = FALSE)
userYear = userYear + 1
}
paste("schedule/", userYear, "schedule.csv", sep = "")
userYear = 2005
if (userYear <= 2019) {
schedule <- sc.scrape_schedule(start_date = paste(userYear, "-10-01", sep = ""), end_date = paste(userYear + 1, "-07-01", sep = ""), print_sched = TRUE)
write.csv(schedule, file = paste("/schedule/", userYear, "schedule.csv", sep = ""), row.names = FALSE)
userYear = userYear + 1
}
write.csv(schedule, file = paste("/schedule/", userYear, "schedule.csv", sep = ""), row.names = FALSE)
getwd
getwd()
paste("/schedule/", userYear, "schedule.csv", sep = "")
userYear = 2005
if (userYear <= 2019) {
schedule <- sc.scrape_schedule(start_date = paste(userYear, "-10-01", sep = ""), end_date = paste(userYear + 1, "-07-01", sep = ""), print_sched = TRUE)
write.csv(schedule, file = paste("/schedule/", userYear, "schedule.csv", sep = ""), row.names = FALSE)
userYear = userYear + 1
}
write.csv(schedule, file = paste("/schedule/", userYear, "schedule.csv", sep = ""), row.names = FALSE)
write.csv(schedule, file = paste("schedule/", userYear, "schedule.csv", sep = ""), row.names = FALSE)
userYear = 2005
if (userYear <= 2019) {
schedule <- sc.scrape_schedule(start_date = paste(userYear, "-10-01", sep = ""), end_date = paste(userYear + 1, "-07-01", sep = ""), print_sched = TRUE)
write.csv(schedule, file = paste("schedule/", userYear, "schedule.csv", sep = ""), row.names = FALSE)
userYear = userYear + 1
}
if (userYear <= 2019) {
schedule <- sc.scrape_schedule(start_date = paste(userYear, "-10-01", sep = ""), end_date = paste(userYear + 1, "-07-01", sep = ""), print_sched = TRUE)
write.csv(schedule, file = paste("schedule/", userYear, "schedule.csv", sep = ""), row.names = FALSE)
userYear = userYear + 1
}
userYear = 2005
for (userYear <= 2019) {
schedule <- sc.scrape_schedule(start_date = paste(userYear, "-10-01", sep = ""), end_date = paste(userYear + 1, "-07-01", sep = ""), print_sched = TRUE)
write.csv(schedule, file = paste("schedule/", userYear, "schedule.csv", sep = ""), row.names = FALSE)
userYear = userYear + 1
}
userYear = 2005
for (userYear < 2019) {
schedule <- sc.scrape_schedule(start_date = paste(userYear, "-10-01", sep = ""), end_date = paste(userYear + 1, "-07-01", sep = ""), print_sched = TRUE)
write.csv(schedule, file = paste("schedule/", userYear, "schedule.csv", sep = ""), row.names = FALSE)
userYear = userYear + 1
}
if (userYear <= 2019) {
schedule <- sc.scrape_schedule(start_date = paste(userYear, "-10-01", sep = ""), end_date = paste(userYear + 1, "-07-01", sep = ""), print_sched = TRUE)
write.csv(schedule, file = paste("schedule/", userYear, "schedule.csv", sep = ""), row.names = FALSE)
userYear = userYear + 1
}
if (userYear <= 2019) {
schedule <- sc.scrape_schedule(start_date = paste(userYear, "-10-01", sep = ""), end_date = paste(userYear + 1, "-07-01", sep = ""), print_sched = TRUE)
write.csv(schedule, file = paste("schedule/", userYear, "schedule.csv", sep = ""), row.names = FALSE)
userYear = userYear + 1
}
if (userYear <= 2019) {
schedule <- sc.scrape_schedule(start_date = paste(userYear, "-10-01", sep = ""), end_date = paste(userYear + 1, "-07-01", sep = ""), print_sched = TRUE)
write.csv(schedule, file = paste("schedule/", userYear, "schedule.csv", sep = ""), row.names = FALSE)
userYear = userYear + 1
}
if (userYear <= 2019) {
schedule <- sc.scrape_schedule(start_date = paste(userYear, "-10-01", sep = ""), end_date = paste(userYear + 1, "-07-01", sep = ""), print_sched = TRUE)
write.csv(schedule, file = paste("schedule/", userYear, "schedule.csv", sep = ""), row.names = FALSE)
userYear = userYear + 1
}
if (userYear <= 2019) {
schedule <- sc.scrape_schedule(start_date = paste(userYear, "-10-01", sep = ""), end_date = paste(userYear + 1, "-07-01", sep = ""), print_sched = TRUE)
write.csv(schedule, file = paste("schedule/", userYear, "schedule.csv", sep = ""), row.names = FALSE)
userYear = userYear + 1
}
if (userYear <= 2019) {
schedule <- sc.scrape_schedule(start_date = paste(userYear, "-10-01", sep = ""), end_date = paste(userYear + 1, "-07-01", sep = ""), print_sched = TRUE)
write.csv(schedule, file = paste("schedule/", userYear, "schedule.csv", sep = ""), row.names = FALSE)
userYear = userYear + 1
}
if (userYear <= 2019) {
schedule <- sc.scrape_schedule(start_date = paste(userYear, "-10-01", sep = ""), end_date = paste(userYear + 1, "-07-01", sep = ""), print_sched = TRUE)
write.csv(schedule, file = paste("schedule/", userYear, "schedule.csv", sep = ""), row.names = FALSE)
userYear = userYear + 1
}
if (userYear <= 2019) {
schedule <- sc.scrape_schedule(start_date = paste(userYear, "-10-01", sep = ""), end_date = paste(userYear + 1, "-07-01", sep = ""), print_sched = TRUE)
write.csv(schedule, file = paste("schedule/", userYear, "schedule.csv", sep = ""), row.names = FALSE)
userYear = userYear + 1
}
userYear = 2000
if (userYear <= 2019) {
schedule <- sc.scrape_schedule(start_date = paste(userYear, "-10-01", sep = ""), end_date = paste(userYear + 1, "-07-01", sep = ""), print_sched = TRUE)
write.csv(schedule, file = paste("schedule/", userYear, "schedule.csv", sep = ""), row.names = FALSE)
userYear = userYear + 1
}
userYear = 2000
if (userYear <= 2019) {
schedule <- sc.scrape_schedule(start_date = paste(userYear, "-10-01", sep = ""), end_date = paste(userYear + 1, "-07-01", sep = ""), print_sched = TRUE)
write.csv(schedule, file = paste("schedule/", userYear, "schedule.csv", sep = ""), row.names = FALSE)
userYear = userYear + 1
}
userYear = 2000
if (userYear <= 2019) {
schedule <- sc.scrape_schedule(start_date = paste(userYear, "-10-01", sep = ""), end_date = paste(userYear + 1, "-07-01", sep = ""), print_sched = TRUE)
write.csv(schedule, file = paste("schedule/", userYear, "schedule.csv", sep = ""), row.names = FALSE)
userYear = userYear + 1
}
if (userYear <= 2019) {
schedule <- sc.scrape_schedule(start_date = paste(userYear, "-10-01", sep = ""), end_date = paste(userYear + 1, "-07-01", sep = ""), print_sched = TRUE)
write.csv(schedule, file = paste("schedule/", userYear, "schedule.csv", sep = ""), row.names = FALSE)
userYear = userYear + 1
}
if (userYear <= 2019) {
schedule <- sc.scrape_schedule(start_date = paste(userYear, "-10-01", sep = ""), end_date = paste(userYear + 1, "-07-01", sep = ""), print_sched = TRUE)
write.csv(schedule, file = paste("schedule/", userYear, "schedule.csv", sep = ""), row.names = FALSE)
userYear = userYear + 1
}
if (userYear <= 2019) {
schedule <- sc.scrape_schedule(start_date = paste(userYear, "-10-01", sep = ""), end_date = paste(userYear + 1, "-07-01", sep = ""), print_sched = TRUE)
write.csv(schedule, file = paste("schedule/", userYear, "schedule.csv", sep = ""), row.names = FALSE)
userYear = userYear + 1
}
if (userYear <= 2019) {
schedule <- sc.scrape_schedule(start_date = paste(userYear, "-10-01", sep = ""), end_date = paste(userYear + 1, "-07-01", sep = ""), print_sched = TRUE)
write.csv(schedule, file = paste("schedule/", userYear, "schedule.csv", sep = ""), row.names = FALSE)
userYear = userYear + 1
}
if (userYear <= 2019) {
schedule <- sc.scrape_schedule(start_date = paste(userYear, "-10-01", sep = ""), end_date = paste(userYear + 1, "-07-01", sep = ""), print_sched = TRUE)
write.csv(schedule, file = paste("schedule/", userYear, "schedule.csv", sep = ""), row.names = FALSE)
userYear = userYear + 1
}
if (userYear <= 2019) {
schedule <- sc.scrape_schedule(start_date = paste(userYear, "-10-01", sep = ""), end_date = paste(userYear + 1, "-07-01", sep = ""), print_sched = TRUE)
write.csv(schedule, file = paste("schedule/", userYear, "schedule.csv", sep = ""), row.names = FALSE)
userYear = userYear + 1
}
