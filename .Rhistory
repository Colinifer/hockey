"%20and%20seasonId%3E=", season_id_fun
)
)
hold_skater_bios_playoffs <- jsonlite::fromJSON(
paste0(
"https://api.nhle.com/stats/rest/en/skater/bios?",
"isAggregate=false",
"&isGame=false",
"&sort=%5B%7B%22property%22:%22lastName%22,%22direction%22:%22ASC_CI%22%7D,%7B%22property%22:%22skaterFullName%22,%22direction%22:%22ASC_CI%22%7D%5D",
"&start=", start_,
"&limit=", end_,
"&factCayenneExp=gamesPlayed%3E=1",
"&cayenneExp=",
"gameTypeId=", 3,
"%20and%20seasonId%3C=", season_id_fun,
"%20and%20seasonId%3E=", season_id_fun
)
)
## Goalies
hold_goalie_bios_regular <- jsonlite::fromJSON(
paste0(
"https://api.nhle.com/stats/rest/en/goalie/bios?",
"isAggregate=false",
"&isGame=false",
"&sort=%5B%7B%22property%22:%22lastName%22,%22direction%22:%22ASC_CI%22%7D,%7B%22property%22:%22goalieFullName%22,%22direction%22:%22ASC_CI%22%7D%5D",
"&start=", start_,
"&limit=", end_,
"&factCayenneExp=gamesPlayed%3E=1",
"&cayenneExp=",
"gameTypeId=", 2,
"%20and%20seasonId%3C=", season_id_fun,
"%20and%20seasonId%3E=", season_id_fun
)
)
hold_goalie_bios_playoffs <- jsonlite::fromJSON(
paste0(
"https://api.nhle.com/stats/rest/en/goalie/bios?",
"isAggregate=false",
"&isGame=false",
"&sort=%5B%7B%22property%22:%22lastName%22,%22direction%22:%22ASC_CI%22%7D,%7B%22property%22:%22goalieFullName%22,%22direction%22:%22ASC_CI%22%7D%5D",
"&start=", start_,
"&limit=", end_,
"&factCayenneExp=gamesPlayed%3E=1",
"&cayenneExp=",
"gameTypeId=", 3,
"%20and%20seasonId%3C=", season_id_fun,
"%20and%20seasonId%3E=", season_id_fun
)
)
## Ensure playoffs are present in specified season
if (hold_skater_bios_playoffs$total > 0 & hold_goalie_bios_playoffs$total > 0) {
player_bios_df <- bind_rows(
hold_skater_bios_regular$data %>%  mutate(session = "R"),
hold_skater_bios_playoffs$data %>% mutate(session = "P"),
hold_goalie_bios_regular$data %>%  mutate(session = "R", positionCode = "G"),
hold_goalie_bios_playoffs$data %>% mutate(session = "P", positionCode = "G")
)
} else {
player_bios_df <- bind_rows(
hold_skater_bios_regular$data %>% mutate(session = "R"),
hold_goalie_bios_regular$data %>% mutate(session = "R", positionCode = "G")
)
}
## Combine and process player bios data
player_bios_df <- player_bios_df %>%
arrange(lastName) %>%
mutate(
season = season_id_fun,
fullName = ifelse(is.na(skaterFullName), goalieFullName, ifelse(is.na(goalieFullName), skaterFullName, NA))
) %>%
group_by(
playerId, fullName, lastName,
positionCode, shootsCatches,
season,
birthDate, birthCity, birthStateProvinceCode, birthCountryCode, nationalityCode,
draftYear, draftRound, draftOverall,
height, weight
) %>%
summarise() %>%
ungroup() %>%
arrange(lastName, fullName) %>%
rename_all(list(~snakecase::to_snake_case(.))) %>%
rename(
api_id = player_id,
position = position_code
) %>%
data.frame()
## Return data
return(
player_bios_df
)
}
## Scrape & Process Player Names Only (from HTM shifts source)  *** Non Essential / Testing ***
sc.get_names_combine <- function(games_vec) {
## Get names function (from html shifts data)
sc.get_names <- function(game, attempts) {
url_home_shifts <- NULL
try_count <-  attempts
while (!is.character(url_home_shifts) & try_count > 0) {
url_home_shifts <- try(
getURL(
paste0(
"http://www.nhl.com/scores/htmlreports/",
paste0(as.numeric(substr(game, 1, 4)), as.numeric(substr(game, 1, 4)) + 1),
"/TH0",
as.character(substr(game, 6, 10)),
".HTM"
)
)
)
try_count <- try_count - 1
}
url_away_shifts <- NULL
try_count <- attempts
while (!is.character(url_away_shifts) & try_count > 0) {
url_away_shifts <- try(
getURL(
paste0(
"http://www.nhl.com/scores/htmlreports/",
paste0(as.numeric(substr(game, 1, 4)), as.numeric(substr(game, 1, 4)) + 1),
"/TV0",
as.character(substr(game, 6, 10)),
".HTM"
)
)
)
try_count <- try_count - 1
}
## Pull out scraped shifts data
home_shifts_titles <- rvest::html_text(rvest::html_nodes(xml2::read_html(url_home_shifts), ".border"))
away_shifts_titles <- rvest::html_text(rvest::html_nodes(xml2::read_html(url_away_shifts), ".border"))
return_df <-
bind_rows(
data.frame(
num_last_first = home_shifts_titles[-1],
fullTeam =       home_shifts_titles[1],
stringsAsFactors = FALSE
),
data.frame(
num_last_first = away_shifts_titles[-1],
fullTeam =       away_shifts_titles[1],
stringsAsFactors = FALSE
)
) %>%
group_by(num_last_first) %>%
mutate(
firstName =  strsplit(gsub("^[0-9]+ ", "", num_last_first), ", ")[[1]][2],
lastName =   strsplit(gsub("^[0-9]+ ", "", num_last_first), ", ")[[1]][1],
player =     paste0(firstName, ".", lastName),
player_num = parse_number(num_last_first),
game_id =    game
) %>%
data.frame()
}
## Loop get names function
player_names <- foreach(i = 1:length(games_vec), .combine = bind_rows) %do% {
print(games_vec[i])
hold_df <- try(sc.get_names(game = games_vec[i], attempts = 3), silent = TRUE)
if (class(hold_df) == "data.frame") {
hold_df
} else {
data.frame(
num_last_first = character(),
fullTeam = character(),
firstName = character(),
lastName = character(),
player = character(),
player_num = numeric(),
game_id = character(),
stringsAsFactors = FALSE
)
}
}
## Return data
return(player_names)
}
## ------------------------------------------ ##
## *** Still in testing ***
## ------------------------ ##
##   Expand PBP Functions   ##
## ------------------------ ##
# Expand event information
sc.pbp_expand <- function(data) {
print("expand", quote = F)
hold <- data %>%
mutate(event_circle =
1 * (coords_x <= -25 & coords_y > 0) +
2 * (coords_x <= -25 & coords_y < 0) +
3 * (coords_x < 0 & coords_x > 25 & coords_y > 0) +
4 * (coords_x < 0 & coords_x > 25 & coords_y < 0) +
5 * (abs(coords_x) < 5 & abs(coords_y) < 5) +
6 * (coords_x > 0 & coords_x < 25 & coords_y > 0) +
7 * (coords_x > 0 & coords_x < 25 & coords_y < 0) +
8 * (coords_x >= 25 & coords_y > 0) +
9 * (coords_x >= 25 & coords_y < 0),
event_rinkside =
case_when(
coords_x <= -25 ~ "L",
coords_x > -25 & coords_x < 25 ~ "N",
coords_x >= 25 ~ "R"
),
home_zone = ifelse(event_team == away_team & event_zone == "Off", "Def",
ifelse(event_team == away_team & event_zone == "Def", "Off", event_zone)),
# Initial distance / angle calculation
pbp_distance = suppressWarnings(as.numeric(sub(".*Zone, *(.*?) * ft.*", "\\1", event_description))),
pbp_distance = ifelse(event_type %in% st.fenwick_events & is.na(pbp_distance), 0, pbp_distance),
event_distance = sqrt((89 - abs(coords_x))^2 + coords_y^2),
event_angle = abs(atan(coords_y / (89 - abs(coords_x))) * (180 / pi)),
# Update distance calc for long shots (and various mistakes)
event_distance = ifelse(event_type %in% st.fenwick_events & pbp_distance > 89 & coords_x < 0 &
event_detail != "Tip-In" & event_detail != "Wrap-around" & event_detail != "Deflected" & !(pbp_distance > 89 & event_zone == "Off"),
sqrt((abs(coords_x) + 89)^2 + coords_y^2),
ifelse(event_type %in% st.fenwick_events & pbp_distance > 89 & coords_x > 0 &
event_detail != "Tip-In" & event_detail != "Wrap-around" & event_detail != "Deflected" & !(pbp_distance > 89 & event_zone == "Off"),
sqrt((coords_x + 89)^2 + coords_y^2),
event_distance)),
event_angle = ifelse(event_type %in% st.fenwick_events & pbp_distance > 89 & coords_x < 0 &
event_detail != "Tip-In" & event_detail != "Wrap-around" & event_detail != "Deflected" & !(pbp_distance > 89 & event_zone == "Off"),
abs( atan(coords_y / (abs(coords_x) + 89)) * (180 / pi)),
ifelse(event_type %in% st.fenwick_events & pbp_distance > 89 & coords_x > 0 &
event_detail != "Tip-In" & event_detail != "Wrap-around" & event_detail != "Deflected" & !(pbp_distance > 89 & event_zone == "Off"),
abs(atan(coords_y / (coords_x + 89)) * (180 / pi)),
event_angle)),
# Flip event_zone for blocked shot errors / distance less than 64 feet
event_zone = ifelse(event_zone == "Def" & event_type == "BLOCK", "Off", event_zone),
event_zone = ifelse(event_type %in% st.fenwick_events & event_zone == "Def" & pbp_distance <= 64, "Off", event_zone)
)
print("face_ID", quote = F)
# Add home_zonestart for corsi events
face_index <- hold %>%
filter(event_type %in% c(st.corsi_events, "FAC"),
game_period < 5
) %>%
arrange(game_id, event_index) %>%
mutate(face_index = cumsum(event_type == "FAC")) %>%
group_by(game_id, face_index) %>%
arrange(event_index) %>%
mutate(test = first(home_zone),
home_zonestart = ifelse(first(home_zone) == "Def", 1,
ifelse(first(home_zone) == "Neu", 2,
ifelse(first(home_zone) == "Off", 3, NA)))
) %>%
ungroup() %>%
select(game_id, event_index, home_zonestart) %>%
data.frame()
# Join
print("join", quote = F)
print("---", quote = F)
hold <- hold %>%
left_join(face_index, by = c("game_id", "event_index")) %>%
data.frame()
}
# Add faceoff, penalty, and shift indexes
sc.pbp_index <- function(data) {
data <- pbp_base_new
# Add shift/face/pen indexes & shift IDs
print("index", quote = F)
pbp_hold <- data %>%
arrange(game_id, event_index) %>%
mutate(face_index =  cumsum(event_type == "FAC"),
shift_index = cumsum(event_type == "CHANGE"),
pen_index =   cumsum(event_type == "PENL")
) %>%
data.frame()
print("shift_ID", quote = F)
hold <- pbp_hold %>%
filter(event_type %in% c("CHANGE", ## testing
"FAC", "GOAL", "BLOCK", "SHOT", "MISS", "HIT", "TAKE", "GIVE", "PENL"
),
!(game_period == 5 & session == "R")
) %>%
group_by(game_id, game_period, season,
# home_on_1, home_on_2, home_on_3, home_on_4, home_on_5, home_on_6, home_on_7,
# away_on_1, away_on_2, away_on_3, away_on_4, away_on_5, away_on_6, away_on_7,
# home_goalie, away_goalie,
face_index, shift_index, pen_index
) %>%
#mutate(shift_ID = round(first(event_index) * as.numeric(game_id))) %>%
mutate(shift_ID =
paste0(
str_pad((as.numeric(substr(game_id, 3, 4)) + 1), 2, "left", pad = "0"),
".",
substr(game_id, 6, 10),
#paste0((as.numeric(substr(game_id, 3, 4)) + 1), ".", substr(game_id, 6, 10)),
".",
str_pad(first(event_index), 4, "left", pad = "0")
)
) %>%
summarise(shift_ID =     first(shift_ID),
shift_length = sum(event_length)
) %>%
ungroup() %>%
select(game_id, game_period, season, shift_ID, face_index, shift_index, pen_index, shift_length) %>%
data.frame()
print("join", quote = F)
print("---", quote = F)
join <- pbp_hold %>%
left_join(
hold,
by = c(
"game_id", "game_period", "season",
# "home_on_1", "home_on_2", "home_on_3", "home_on_4", "home_on_5", "home_on_6",
# "away_on_1", "away_on_2", "away_on_3", "away_on_4","away_on_5", "away_on_6",
# "home_goalie", "away_goalie",
"face_index", "shift_index", "pen_index"
)
) %>%
data.frame()
}
###########################
## ------------------------------------------ ##
sc.game_info(game_id_fun = 2019021020, season_id_fun = 2019)
sc.scrape_events_HTM()
sc.scrape_events_HTM(2019)
sc.scrape_events_HTM(season_id_fun = 2019)
sc.scrape_events_HTM(season_id_fun = "2019")
sc.scrape_pbp(2019021020)
sc.scrape_pbp <- function(games, scrape_type = "full", live_scrape = FALSE, verbose = TRUE, sleep = 0) {
## ----------------------- ##
##   Prepare and Message   ##
## ----------------------- ##
## Check that scrape_type is correct
if (!scrape_type %in% c("full", "event_summary", "rosters")) stop("'scrape_type' Entered is Invalid", call. = FALSE)
## Evaluate game_ids
games_vec <- games
## Check if dead games were provided
if (TRUE %in% (dead_games %in% games_vec)) {
games_vec <- games_vec[!games_vec %in% dead_games]
dead_games_removed <- 1
message(paste0("Unable to scrape game(s) ", games[games %in% dead_games], " due to NHL source deficiencies", "\n"))
} else {
dead_games_removed <- 0
}
## Find unique games and sort
games_vec <- sort(unique(games_vec))
if (length(games_vec) == 0) stop("No Valid Games Provided", call. = FALSE)
## Label games to be scraped
if (length(games_vec) > 1) {
cat(paste0("Processing ", length(games_vec), " Games: ", min(sort(as.numeric(games_vec))), "-", max(sort(as.numeric(games_vec)))))
switch (
scrape_type,
"full" =          cat(" // Full Scrape"),
"event_summary" = cat(" // Event Summary and Rosters"),
"rosters" =       cat(" // Rosters Only")
)
cat(paste0("\n", "-------------", "\n"))
} else {
cat(paste0("Processing Game... "))
switch (
scrape_type,
"full" =          cat(" // Full Scrape"),
"event_summary" = cat(" // Event Summary and Rosters"),
"rosters" =       cat(" // Rosters Only")
)
cat(paste0("\n", "-------------", "\n"))
}
if (length(games) != length(games_vec) & dead_games_removed != 1) message("Duplicate game IDs provided - combined for processing", "\n")
## Create report data frame
scrape_report_df <- data.frame(matrix(ncol = 10))
## ------------------------ ##
##   Loop to Scrape Games   ##
## ------------------------ ##
for(i in 1:length(games_vec)) {
cat(paste0(games_vec[i], "...  "))
start_time <- Sys.time()
## Try to scrape game(s)
tryCatch({
pbp_list <- sc.scrape_game(
game_id =     games_vec[i],
season_id =   paste0(as.numeric(substr(games_vec[i], 1, 4)), as.numeric(substr(games_vec[i], 1, 4)) + 1),
scrape_type_ = scrape_type,
live_scrape_ = live_scrape
)
if (scrape_type == "full") {
hold_pbp_base <-       pbp_list$pbp_base
hold_pbp_extras <-     pbp_list$pbp_extras
hold_player_shifts <-  pbp_list$player_shifts
hold_player_periods <- pbp_list$player_periods
hold_game_info_df <-   pbp_list$game_info_df
}
if (scrape_type %in% c("event_summary", "full")) {
hold_event_summary_df <- pbp_list$event_summary_df
}
hold_roster_df <-    pbp_list$roster_df
hold_scratches_df <- pbp_list$scratches_df
## Bind data
if (i == 1 | !exists("new_roster_df")) {
if (scrape_type == "full") {
new_pbp_base <-       pbp_list$pbp_base
new_pbp_extras <-     pbp_list$pbp_extras
new_player_shifts <-  pbp_list$player_shifts
new_player_periods <- pbp_list$player_periods
new_game_info_df <-   pbp_list$game_info_df
}
if (scrape_type %in% c("event_summary", "full")) {
new_event_summary_df <- pbp_list$event_summary_df
}
new_roster_df <-    pbp_list$roster_df
new_scratches_df <- pbp_list$scratches_df
} else if (i > 1) {
if (scrape_type == "full") {
new_pbp_base <-       bind_rows(hold_pbp_base, new_pbp_base)
new_pbp_extras <-     bind_rows(hold_pbp_extras, new_pbp_extras)
new_player_shifts <-  bind_rows(hold_player_shifts, new_player_shifts)
new_player_periods <- bind_rows(hold_player_periods, new_player_periods)
new_game_info_df <-   bind_rows(hold_game_info_df, new_game_info_df)
}
if (scrape_type %in% c("event_summary", "full")) {
new_event_summary_df <- bind_rows(hold_event_summary_df, new_event_summary_df)
}
new_roster_df <-    bind_rows(hold_roster_df, new_roster_df)
new_scratches_df <- bind_rows(hold_scratches_df, new_scratches_df)
}
},
error = function(e) cat("ERROR :", conditionMessage(e), "... ")
)
## Scrape report data frame
if (exists("hold_roster_df")) {
if (games_vec[i] == unique(hold_roster_df$game_id)) {
scrape_report_df[i, 1] <-  games_vec[i]
scrape_report_df[i, 2] <-  na_if_null(nrow(pbp_list$pbp_base))
scrape_report_df[i, 3] <-  na_if_null(nrow(pbp_list$pbp_extras))
scrape_report_df[i, 4] <-  na_if_null(nrow(pbp_list$player_shifts))
scrape_report_df[i, 5] <-  na_if_null(nrow(pbp_list$player_periods))
scrape_report_df[i, 6] <-  na_if_null(nrow(pbp_list$roster_df))
scrape_report_df[i, 7] <-  na_if_null(nrow(pbp_list$scratches_df))
scrape_report_df[i, 8] <-  na_if_null(nrow(pbp_list$event_summary_df))
scrape_report_df[i, 9] <-  na_if_null(nrow(pbp_list$game_info_df))
scrape_report_df[i, 10] <- as.numeric(round(Sys.time() - start_time, 2))
} else {
scrape_report_df[i, 1] <-       games_vec[i]
scrape_report_df[i, c(2, 9)] <- NA
scrape_report_df[i, 10] <-      as.numeric(round(Sys.time() - start_time, 2))
}
} else {
scrape_report_df[i, 1] <-       games_vec[i]
scrape_report_df[i, c(2, 9)] <- NA
scrape_report_df[i, 10] <-      as.numeric(round(Sys.time() - start_time, 1))
}
## Print times if verbose
if (verbose == TRUE) cat(paste0(round(scrape_report_df[i, 10], 1), " sec"), "\n") else cat("\n")
## Garbage collect every 200 games
if (isTRUE(all.equal(i / 200, as.integer(i / 200), check.attributes = FALSE))) {
invisible(gc())
}
}
## Add Names
names(scrape_report_df) <- c("game_id", "pbp_base", "pbp_extras", "player_shifts", "player_periods",
"roster_df", "scratches_df", "events_summary_df", "game_info_df", "time_elapsed")
## Print results
cat("-------------", "\n",
paste0(
length(unique(new_roster_df$game_id)), " of ", length(games_vec),
" games returned // Avg Time Per Game: ",
round(mean(scrape_report_df$time_elapsed), 1), "\n"
)
)
## Return List
if (scrape_type == "full") {
return_list <- list(
game_info_df =      new_game_info_df %>% arrange(game_id),
pbp_base =          new_pbp_base %>% arrange(game_id),
pbp_extras =        new_pbp_extras %>% arrange(game_id),
player_shifts =     new_player_shifts %>% arrange(game_id),
player_periods =    new_player_periods %>% arrange(game_id),
roster_df =         new_roster_df %>% arrange(game_id),
scratches_df =      new_scratches_df %>% arrange(game_id),
events_summary_df = new_event_summary_df %>% arrange(game_id),
report =            scrape_report_df %>% arrange(game_id)
)
} else if (scrape_type == "event_summary") {
return_list <- list(
roster_df =         new_roster_df %>% arrange(game_id),
scratches_df =      new_scratches_df %>% arrange(game_id),
events_summary_df = new_event_summary_df %>% arrange(game_id),
report =            scrape_report_df %>% arrange(game_id)
)
} else {
return_list <- list(
roster_df =    new_roster_df %>% arrange(game_id),
scratches_df = new_scratches_df %>% arrange(game_id),
report =       scrape_report_df %>% arrange(game_id)
)
}
## Return data
return(return_list)
}
sc.scrape_pbp(2019021020)
sc.scrape_pbp("2019021020")
sc.scrape_pbp(2019021020, live_scrape = TRUE)
sc.scrape_pbp(games = 2019021020, live_scrape = TRUE)
sc.scrape_pbp(games = 2019021020,scrape_type = "rosters:, live_scrape = TRUE)
sc.scrape_pbp(games = 2019021020,scrape_type = "rosters", live_scrape = TRUE)
games_vec <- c(as.character(seq(2019020001, 2019020100, by = 1)))
pbp_scrabe <- sc.scrape_pbp(games = games_vec)
schedule_current <- sc.scrape_schedule(start_date = Sys.Date() - 1, end_date =   Sys.Date() - 1)
pbp_scrape$player_periods
games_vec <- c(as.character(seq(2019020001, 2019020100, by = 1)))
pbp_scrabe <- sc.scrape_pbp(games = games_vec)
games_vec <- c(as.character(seq(2018020001, 2018020100, by = 1)))
pbp_scrape <- sc.scrape_pbp(games = games_vec)
library(RCurl)
library(xml2)
library(rvest)
library(jsonlite)
library(foreach)
library(lubridate)
library(snakecase)
library(devtools)
library(tidyverse)
?unique
length(unique(new_roster_df$game_id))
