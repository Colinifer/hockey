if (any(installed_packages == FALSE)) {
install.packages(pkgs[!installed_packages])
}
invisible(lapply(pkgs, library, character.only = TRUE))
####################
## Initialize Working Directory
####################
##reset
setwd("~/")
gid <- paste(getwd())
gid
device <- ""
if (gid == "/Volumes/HDD/Users/colinwelsh") {
##Maverick - MBP
setwd("~/Documents/dev/hockey")
device <- "Maverick (MBP)"
} else if (gid == "/Users/ColinWelsh") {
##Goose - iMac
setwd("~/Documents/dev/hockey")
device <- "Goose (iMac)"
##add Goose
} else if (gid == "/home/rstudio-user") {
setwd("/cloud/project")
device <- "RStudio Cloud"
}
print(paste(device, "is ready for some hockey", sep = " "))
rm(gid, device)
####################
## Create Items
userYear <- 2019
userDate <- Sys.Date()
userYear <- 2018
fschedule <- paste("schedule/", userYear, "schedule.csv", sep = "")
schedule <- read.csv(file = fschedule)
tibble(schedule)
pkgs <- c("RCurl", "xml2", "rvest",
"jsonlite", "foreach", "lubridate",
"tidyverse")
installed_packages <- pkgs %in%
rownames(installed.packages())
if (any(installed_packages == FALSE)) {
install.packages(pkgs[!installed_packages])
}
invisible(lapply(pkgs, library, character.only = TRUE))
source("EH_scrape_functions.R")
fschedule <- paste("schedule/", userYear, "schedule.csv", sep = "")
schedule <- sc.scrape_schedule(start_date = paste(userYear, "-10-01", sep = ""), end_date = paste(userYear + 1, "-07-01", sep = ""), print_sched = TRUE)
write.csv(schedule, file = fschedule, row.names = FALSE)
schedule <- read.csv(file = fschedule)
tibble(schedule)
tail(schedule)
game_ids <- as.character(seq(schedule$game_id[1], schedule$game_id[nrow(schedule)], by = 1))
for (n in game_ids) {
print(n)
pbp_scrape <- sc.scrape_pbp(games = n)
fgame_info_df <- paste("data/", userYear, "game_info_df", ".csv", sep = "")
fpbp_base <- paste("data/", userYear, "pbp_base", ".csv", sep = "")
fpbp_extras <- paste("data/", userYear, "pbp_extras", ".csv", sep = "")
fplayer_shifts <- paste("data/", userYear, "player_shifts", ".csv", sep = "")
fplayer_periods <- paste("data/", userYear, "player_periods", ".csv", sep = "")
froster_df <- paste("data/", userYear, "roster_df", ".csv", sep = "")
fscratches_df <- paste("data/", userYear, "scratches_df", ".csv", sep = "")
fevents_summary_df <- paste("data/", userYear, "events_summary_df", ".csv", sep = "")
freport <- paste("data/", userYear, "report", ".csv", sep = "")
game_info_df <-           read.csv(fgame_info_df)
pbp_base <-               read.csv(fpbp_base)
pbp_extras <-             read.csv(fpbp_extras)
player_shifts <-          read.csv(fplayer_shifts)
player_periods <-         read.csv(fplayer_periods)
roster_df <-              read.csv(froster_df)
scratches_df <-           read.csv(fscratches_df)
events_summary_df <-      read.csv(fevents_summary_df)
report <-                 read.csv(freport)
game_info_df_new <-       pbp_scrape$game_info_df       ## game information data
pbp_base_new <-           pbp_scrape$pbp_base           ## main play-by-play data
pbp_extras_new <-         pbp_scrape$pbp_extras         ## extra play-by-play data
player_shifts_new <-      pbp_scrape$player_shifts      ## full player shifts data
player_periods_new <-     pbp_scrape$player_periods     ## player TOI sums per period
roster_df_new <-          pbp_scrape$roster_df          ## roster data
scratches_df_new <-       pbp_scrape$scratches_df       ## scratches data
events_summary_df_new <-  pbp_scrape$events_summary_df  ## event summary data
report_new <-             pbp_scrape$report             ## scrape report
game_info_df_new <- game_info_df_new %>%
mutate(game_id = as.numeric(game_id), season = as.numeric(season))
pbp_base_new <- pbp_base_new %>%
mutate(game_id = as.numeric(game_id), season = as.numeric(season), home_on_7 = as.logical(home_on_7), away_on_7 = as.logical(away_on_7))
pbp_extras_new <- pbp_extras_new %>%
mutate(game_id = as.numeric(game_id))
player_shifts_new <- player_shifts_new %>%
mutate(game_id = as.numeric(game_id), season = as.numeric(season))
player_periods_new <- player_periods_new %>%
mutate(game_id = as.numeric(game_id), season = as.numeric(season))
roster_df_new <- roster_df_new %>%
mutate(game_id = as.numeric(game_id), season = as.numeric(season))
scratches_df_new <- scratches_df_new %>%
mutate(game_id = as.numeric(game_id), season = as.numeric(season))
events_summary_df_new <- events_summary_df_new %>%
mutate(game_id = as.numeric(game_id), season = as.numeric(season))
report_new <- report_new %>%
mutate(game_id = as.numeric(game_id))
##  game_info_df <-       pbp_scrape$game_info_df       ## game information data
##  pbp_base <-           pbp_scrape$pbp_base           ## main play-by-play data
##  pbp_extras <-         pbp_scrape$pbp_extras         ## extra play-by-play data
##  player_shifts <-      pbp_scrape$player_shifts      ## full player shifts data
##  player_periods <-     pbp_scrape$player_periods     ## player TOI sums per period
##  roster_df <-          pbp_scrape$roster_df          ## roster data
##  scratches_df <-       pbp_scrape$scratches_df       ## scratches data
##  events_summary_df <-  pbp_scrape$events_summary_df  ## event summary data
##  report <-             pbp_scrape$report             ## scrape report
game_info_df <- dplyr::union(game_info_df, game_info_df_new)
pbp_base <- dplyr::union(pbp_base, pbp_base_new)
pbp_extras <- dplyr::union(pbp_extras, pbp_extras_new)
player_shifts <- dplyr::union(player_shifts, player_shifts_new)
player_periods <- dplyr::union(player_periods, player_periods_new)
roster_df <- dplyr::union(roster_df, roster_df_new)
scratches_df <- dplyr::union(scratches_df, scratches_df_new)
events_summary_df <- dplyr::union(events_summary_df, events_summary_df_new)
report <- dplyr::union(report, report_new)
write.csv(game_info_df, fgame_info_df, row.names = FALSE)
write.csv(pbp_base, fpbp_base, row.names = FALSE)
write.csv(pbp_extras, fpbp_extras, row.names = FALSE)
write.csv(player_shifts, fplayer_shifts, row.names = FALSE)
write.csv(player_periods, fplayer_periods, row.names = FALSE)
write.csv(roster_df, froster_df, row.names = FALSE)
write.csv(scratches_df, fscratches_df, row.names = FALSE)
write.csv(events_summary_df, fevents_summary_df, row.names = FALSE)
write.csv(report, freport, row.names = FALSE)
}
game_info_df <-           read.csv(fgame_info_df)
pkgs <- c("RCurl", "xml2", "rvest",
"jsonlite", "foreach", "lubridate",
"tidyverse")
installed_packages <- pkgs %in%
rownames(installed.packages())
if (any(installed_packages == FALSE)) {
install.packages(pkgs[!installed_packages])
}
invisible(lapply(pkgs, library, character.only = TRUE))
pkgs <- c("devtools", "tidyverse", "RMariaDB", "DBI", "readr",
"pander", "na.tools", "ggimage",
"devtools", "teamcolors", "glue",
"animate", "dplyr", "tictoc",
"animation", "gt", "DT",
"ggthemes", "bbplot", "ggtext",
"ggforce", "ggridges", "ggrepel",
"ggbeeswarm", "extrafont", "RCurl",
"xml2", "rvest", "jsonlite",
"foreach", "lubridate", "snakecase")
##install.packages(c("devtools", "tidyverse", "readr", "pander", "na.tools", "ggimage", "devtools", "teamcolors", "glue", "animate", "dplyr", "tictoc", "animation"))
##download https://downloads.mariadb.org/connector-c/
installed_packages <- pkgs %in%
rownames(installed.packages())
if (any(installed_packages == FALSE)) {
install.packages(pkgs[!installed_packages])
}
invisible(lapply(pkgs, library, character.only = TRUE))
## Packages ##
####################
pkgs <- c("devtools", "tidyverse", "RMariaDB", "DBI", "readr",
"pander", "na.tools", "ggimage",
"devtools", "teamcolors", "glue",
"animate", "dplyr", "tictoc",
"animation", "gt", "DT",
"ggthemes", "bbplot", "ggtext",
"ggforce", "ggridges", "ggrepel",
"ggbeeswarm", "extrafont", "RCurl",
"xml2", "rvest", "jsonlite",
"foreach", "lubridate", "snakecase")
##install.packages(c("devtools", "tidyverse", "readr", "pander", "na.tools", "ggimage", "devtools", "teamcolors", "glue", "animate", "dplyr", "tictoc", "animation"))
##download https://downloads.mariadb.org/connector-c/
installed_packages <- pkgs %in%
rownames(installed.packages())
if (any(installed_packages == FALSE)) {
install.packages(pkgs[!installed_packages])
}
invisible(lapply(pkgs, library, character.only = TRUE))
####################
## Initialize Working Directory
####################
##reset
setwd("~/")
gid <- paste(getwd())
gid
device <- ""
if (gid == "/Volumes/HDD/Users/colinwelsh") {
## Maverick - MBP
setwd("~/Documents/dev/hockey")
device <- "Maverick (MBP)"
} else if (gid == "/Users/ColinWelsh") {
## Goose - iMac
setwd("~/Documents/dev/hockey")
device <- "Goose (iMac)"
} else if (gid == "/home/rstudio-user") {
## Goose - iMac
setwd("/cloud/project")
device <- "RStudio Cloud"
}
print(paste(device, "is ready for some hockey", sep = " "))
rm(gid, device)
###############
format(Sys.Date(), "%Y-%d-%m")
load("/Users/ColinWelsh/Downloads/nflteams.rda")
rm(nflteams)
# Packages & Init Setup ---------------------------------------------------
proj_name <- "hockey"
# devtools::install_github('bbc/bbplot')
pkgs <- c(
"devtools",
"tidyverse",
"RMariaDB",
"DBI",
"readr",
"pander",
"na.tools",
"ggimage",
"devtools",
"teamcolors",
"glue",
"dplyr",
"RCurl",
"tictoc",
"animation",
"gt",
"DT",
"ggthemes",
"bbplot",
"ggtext",
"ggforce",
"ggridges",
"ggrepel",
"ggbeeswarm",
"extrafont",
"RCurl",
"xml2",
"rvest",
"jsonlite",
"foreach",
"lubridate",
"snakecase",
"nhlapi"
)
installed_packages <- pkgs %in%
rownames(installed.packages())
if (any(installed_packages == FALSE)) {
install.packages(pkgs[!installed_packages])
}
invisible(lapply(pkgs, library, character.only = TRUE))
rm(pkgs, installed_packages)
# Initialize Working Directory --------------------------------------------
source("../initR/init.R")
fx.setdir(proj_name)
# Create standard objects -------------------------------------------------
source("../initR/con.R")
dbListTables(con)
dbDisconnect(con)
userYear <- substr(Sys.Date(), 1, 4)
userDate <- Sys.Date()
today <- format(Sys.Date(), "%Y-%d-%m")
source("EH_scrape_functions.R")
u.scrape_interval <- 500
source("../initR/con.R")
schedule <- dbGetQuery(
con,
"SELECT * FROM `hockey`.`schedule` WHERE (`season` > '2009') AND (`game_status` = 'Final') ORDER BY `game_id`"
)
dbDisconnect(con)
game_ids <- schedule %>%
filter(season > 2009) %>%
select(game_id) %>%
pull(game_id)
# game_ids <- game_ids$game_id
# dbWriteTable(
#   con,
#   value = sc.scrape_schedule(
#     start_date = as.Date('2019-10-02'),
#     end_date =   Sys.Date() + 20
#   ),
#   name = "schedule"
#   # append = TRUE
# )
# Get existing Game IDs from DB
source("../initR/con.R")
existing_game_ids <- unique(dbGetQuery(con, "SELECT game_id FROM pbp_base;"))
dbDisconnect(con)
id_latest <- grep(existing_game_ids$game_id[nrow(existing_game_ids)], game_ids)
id_latest <- grep("2011020661", game_ids)
tic("Total scrape")
pbp_scrape <-
sc.scrape_pbp(games = game_ids[(id_latest + 1):(id_latest + u.scrape_interval)]) # 300 was last
source("../initR/con.R")
fx.append <- function(x){
dbApp
}
qry_list <- names(pbp_scrape)
tic("Total Upload")
tic("game_info")
dbWriteTable(
con,
value = pbp_scrape$game_info_df,
name = "game_info",
append = TRUE
)
print("Successfully added game_info")
toc()
tic("pbp_base")
dbWriteTable(
con,
value = pbp_scrape$pbp_base,
name = "pbp_base",
append = TRUE
)
print("Successfully added pbp_base")
toc()
tic("pbp_extras")
dbWriteTable(
con,
value = pbp_scrape$pbp_extras,
name = "pbp_extras",
append = TRUE
)
print("Successfully added pbp_extras")
toc()
tic("player_shifts")
dbWriteTable(
con,
value = pbp_scrape$player_shifts,
name = "player_shifts",
append = TRUE
)
print("Successfully added player_shifts")
toc()
tic("player_periods")
dbWriteTable(
con,
value = pbp_scrape$player_periods,
name = "player_periods",
append = TRUE
)
print("Successfully added player_periods")
toc()
tic("roster")
dbWriteTable(
con,
value = pbp_scrape$roster_df,
name = "roster",
append = TRUE)
print("Successfully added roster")
toc()
tic("scratches")
dbWriteTable(
con,
value = pbp_scrape$scratches_df,
name = "scratches",
append = TRUE)
print("Successfully added scratches")
toc()
tic("events_summary")
dbWriteTable(
con,
value = pbp_scrape$events_summary_df,
name = "events_summary",
append = TRUE
)
print("Successfully added events_summary")
toc()
tic("report")
dbWriteTable(
con,
value = pbp_scrape$report,
name = "report",
append = TRUE)
print("Successfully added report")
toc()
print("Successfully uploaded latest scrape to DB!")
toc()
toc()
dbDisconnect(con)
# dbWriteTable(
#   con,
#   value = sc.scrape_schedule(
#     start_date = as.Date('2019-10-02'),
#     end_date =   Sys.Date() + 20
#   ),
#   name = "schedule",
#   append = TRUE
# )
# dbWriteTable(con, value = dbReadTable(con, "2019schedule"), name = "schedule", append = TRUE)
source("../initR/con.R")
schedule <- dbGetQuery(
con,
"SELECT * FROM `hockey`.`schedule` WHERE (`season` > '2009') AND (`game_status` = 'Final') ORDER BY `game_id`"
)
dbDisconnect(con)
game_ids <- schedule %>%
filter(season > 2009) %>%
select(game_id) %>%
pull(game_id)
# game_ids <- game_ids$game_id
# dbWriteTable(
#   con,
#   value = sc.scrape_schedule(
#     start_date = as.Date('2019-10-02'),
#     end_date =   Sys.Date() + 20
#   ),
#   name = "schedule"
#   # append = TRUE
# )
# Get existing Game IDs from DB
source("../initR/con.R")
existing_game_ids <- unique(dbGetQuery(con, "SELECT game_id FROM pbp_base;"))
dbDisconnect(con)
id_latest <- grep(existing_game_ids$game_id[nrow(existing_game_ids)], game_ids)
id_latest <- grep("2012020345", game_ids)
# Create int of latest IDs
# id_latest <- as.integer(
#   substr(
#   existing_game_ids$game_id[nrow(existing_game_ids)],
#   7,
#   nchar(existing_game_ids$game_id[nrow(existing_game_ids)])
#   )
# )
tic("Total scrape")
pbp_scrape <-
sc.scrape_pbp(games = game_ids[(id_latest + 1):(id_latest + u.scrape_interval)]) # 300 was last
source("../initR/con.R")
fx.append <- function(x){
dbApp
}
qry_list <- names(pbp_scrape)
tic("Total Upload")
tic("game_info")
dbWriteTable(
con,
value = pbp_scrape$game_info_df,
name = "game_info",
append = TRUE
)
print("Successfully added game_info")
toc()
tic("pbp_base")
dbWriteTable(
con,
value = pbp_scrape$pbp_base,
name = "pbp_base",
append = TRUE
)
print("Successfully added pbp_base")
toc()
tic("pbp_extras")
dbWriteTable(
con,
value = pbp_scrape$pbp_extras,
name = "pbp_extras",
append = TRUE
)
print("Successfully added pbp_extras")
toc()
tic("player_shifts")
dbWriteTable(
con,
value = pbp_scrape$player_shifts,
name = "player_shifts",
append = TRUE
)
print("Successfully added player_shifts")
toc()
tic("player_periods")
dbWriteTable(
con,
value = pbp_scrape$player_periods,
name = "player_periods",
append = TRUE
)
print("Successfully added player_periods")
toc()
tic("roster")
dbWriteTable(
con,
value = pbp_scrape$roster_df,
name = "roster",
append = TRUE)
print("Successfully added roster")
toc()
tic("scratches")
dbWriteTable(
con,
value = pbp_scrape$scratches_df,
name = "scratches",
append = TRUE)
print("Successfully added scratches")
toc()
tic("events_summary")
dbWriteTable(
con,
value = pbp_scrape$events_summary_df,
name = "events_summary",
append = TRUE
)
print("Successfully added events_summary")
toc()
tic("report")
dbWriteTable(
con,
value = pbp_scrape$report,
name = "report",
append = TRUE)
print("Successfully added report")
toc()
print("Successfully uploaded latest scrape to DB!")
toc()
toc()
dbDisconnect(con)
