"full" =          cat(" // Full Scrape"),
"event_summary" = cat(" // Event Summary and Rosters"),
"rosters" =       cat(" // Rosters Only")
)
cat(paste0("\n", "-------------", "\n"))
}
if (length(games) != length(games_vec) & dead_games_removed != 1) message("Duplicate game IDs provided - combined for processing", "\n")
## Create report data frame
scrape_report_df <- data.frame(matrix(ncol = 10))
## ------------------------ ##
##   Loop to Scrape Games   ##
## ------------------------ ##
for(i in 1:length(games_vec)) {
cat(paste0(games_vec[i], "...  "))
start_time <- Sys.time()
## Try to scrape game(s)
tryCatch({
pbp_list <- sc.scrape_game(
game_id =     games_vec[i],
season_id =   paste0(as.numeric(substr(games_vec[i], 1, 4)), as.numeric(substr(games_vec[i], 1, 4)) + 1),
scrape_type_ = scrape_type,
live_scrape_ = live_scrape
)
if (scrape_type == "full") {
hold_pbp_base <-       pbp_list$pbp_base
hold_pbp_extras <-     pbp_list$pbp_extras
hold_player_shifts <-  pbp_list$player_shifts
hold_player_periods <- pbp_list$player_periods
hold_game_info_df <-   pbp_list$game_info_df
}
if (scrape_type %in% c("event_summary", "full")) {
hold_event_summary_df <- pbp_list$event_summary_df
}
hold_roster_df <-    pbp_list$roster_df
hold_scratches_df <- pbp_list$scratches_df
## Bind data
if (i == 1 | !exists("new_roster_df")) {
if (scrape_type == "full") {
new_pbp_base <-       pbp_list$pbp_base
new_pbp_extras <-     pbp_list$pbp_extras
new_player_shifts <-  pbp_list$player_shifts
new_player_periods <- pbp_list$player_periods
new_game_info_df <-   pbp_list$game_info_df
}
if (scrape_type %in% c("event_summary", "full")) {
new_event_summary_df <- pbp_list$event_summary_df
}
new_roster_df <-    pbp_list$roster_df
new_scratches_df <- pbp_list$scratches_df
} else if (i > 1) {
if (scrape_type == "full") {
new_pbp_base <-       bind_rows(hold_pbp_base, new_pbp_base)
new_pbp_extras <-     bind_rows(hold_pbp_extras, new_pbp_extras)
new_player_shifts <-  bind_rows(hold_player_shifts, new_player_shifts)
new_player_periods <- bind_rows(hold_player_periods, new_player_periods)
new_game_info_df <-   bind_rows(hold_game_info_df, new_game_info_df)
}
if (scrape_type %in% c("event_summary", "full")) {
new_event_summary_df <- bind_rows(hold_event_summary_df, new_event_summary_df)
}
new_roster_df <-    bind_rows(hold_roster_df, new_roster_df)
new_scratches_df <- bind_rows(hold_scratches_df, new_scratches_df)
}
},
error = function(e) cat("ERROR :", conditionMessage(e), "... ")
)
## Scrape report data frame
if (exists("hold_roster_df")) {
if (games_vec[i] == unique(hold_roster_df$game_id)) {
scrape_report_df[i, 1] <-  games_vec[i]
scrape_report_df[i, 2] <-  na_if_null(nrow(pbp_list$pbp_base))
scrape_report_df[i, 3] <-  na_if_null(nrow(pbp_list$pbp_extras))
scrape_report_df[i, 4] <-  na_if_null(nrow(pbp_list$player_shifts))
scrape_report_df[i, 5] <-  na_if_null(nrow(pbp_list$player_periods))
scrape_report_df[i, 6] <-  na_if_null(nrow(pbp_list$roster_df))
scrape_report_df[i, 7] <-  na_if_null(nrow(pbp_list$scratches_df))
scrape_report_df[i, 8] <-  na_if_null(nrow(pbp_list$event_summary_df))
scrape_report_df[i, 9] <-  na_if_null(nrow(pbp_list$game_info_df))
scrape_report_df[i, 10] <- as.numeric(round(Sys.time() - start_time, 2))
} else {
scrape_report_df[i, 1] <-       games_vec[i]
scrape_report_df[i, c(2, 9)] <- NA
scrape_report_df[i, 10] <-      as.numeric(round(Sys.time() - start_time, 2))
}
} else {
scrape_report_df[i, 1] <-       games_vec[i]
scrape_report_df[i, c(2, 9)] <- NA
scrape_report_df[i, 10] <-      as.numeric(round(Sys.time() - start_time, 1))
}
## Print times if verbose
if (verbose == TRUE) cat(paste0(round(scrape_report_df[i, 10], 1), " sec"), "\n") else cat("\n")
## Garbage collect every 200 games
if (isTRUE(all.equal(i / 200, as.integer(i / 200), check.attributes = FALSE))) {
invisible(gc())
}
}
## Add Names
names(scrape_report_df) <- c("game_id", "pbp_base", "pbp_extras", "player_shifts", "player_periods",
"roster_df", "scratches_df", "events_summary_df", "game_info_df", "time_elapsed")
## Print results
cat("-------------", "\n",
paste0(
length(unique(new_roster_df$game_id)), " of ", length(games_vec),
" games returned // Avg Time Per Game: ",
round(mean(scrape_report_df$time_elapsed), 1), "\n"
)
)
## Return List
if (scrape_type == "full") {
return_list <- list(
game_info_df =      new_game_info_df %>% arrange(game_id),
pbp_base =          new_pbp_base %>% arrange(game_id),
pbp_extras =        new_pbp_extras %>% arrange(game_id),
player_shifts =     new_player_shifts %>% arrange(game_id),
player_periods =    new_player_periods %>% arrange(game_id),
roster_df =         new_roster_df %>% arrange(game_id),
scratches_df =      new_scratches_df %>% arrange(game_id),
events_summary_df = new_event_summary_df %>% arrange(game_id),
report =            scrape_report_df %>% arrange(game_id)
)
} else if (scrape_type == "event_summary") {
return_list <- list(
roster_df =         new_roster_df %>% arrange(game_id),
scratches_df =      new_scratches_df %>% arrange(game_id),
events_summary_df = new_event_summary_df %>% arrange(game_id),
report =            scrape_report_df %>% arrange(game_id)
)
} else {
return_list <- list(
roster_df =    new_roster_df %>% arrange(game_id),
scratches_df = new_scratches_df %>% arrange(game_id),
report =       scrape_report_df %>% arrange(game_id)
)
}
## Return data
return(return_list)
}
sc.scrape_pbp(2019021020)
sc.scrape_pbp("2019021020")
sc.scrape_pbp(2019021020, live_scrape = TRUE)
sc.scrape_pbp(games = 2019021020, live_scrape = TRUE)
sc.scrape_pbp(games = 2019021020,scrape_type = "rosters:, live_scrape = TRUE)
sc.scrape_pbp(games = 2019021020,scrape_type = "rosters", live_scrape = TRUE)
games_vec <- c(as.character(seq(2019020001, 2019020100, by = 1)))
pbp_scrabe <- sc.scrape_pbp(games = games_vec)
schedule_current <- sc.scrape_schedule(start_date = Sys.Date() - 1, end_date =   Sys.Date() - 1)
pbp_scrape$player_periods
games_vec <- c(as.character(seq(2019020001, 2019020100, by = 1)))
pbp_scrabe <- sc.scrape_pbp(games = games_vec)
games_vec <- c(as.character(seq(2018020001, 2018020100, by = 1)))
pbp_scrape <- sc.scrape_pbp(games = games_vec)
library(RCurl)
library(xml2)
library(rvest)
library(jsonlite)
library(foreach)
library(lubridate)
library(snakecase)
library(devtools)
library(tidyverse)
?unique
length(unique(new_roster_df$game_id))
fschedule <- paste("schedule/", userYear, "schedule.csv", sep = "")
schedule <- read.csv(fschedule, row.names = FALSE)
schedule <- read.csv(file = fschedule, row.names = FALSE)
userYear = 2019
fschedule <- paste("schedule/", userYear, "schedule.csv", sep = "")
schedule <- read.csv(file = fschedule, row.names = FALSE)
schedule <- read.csv(file = fschedule)
View(schedule)
View(schedule)
schedule %>% dplyr::filter(game_date = Sys.Date())
library(devtools)
library(tidyverse)
library(RMariaDB)
library(DBI)
library(readr)
library(pander)
library(dplyr)
library(na.tools)
library(ggimage)
library(teamcolors) # NFL team colors and logos
library(plyr)
library(readr)
library(glue)
##library(animate)
library(animation)
library(tictoc)
library(gt) # beautiful tables
library(DT) # beautiful interactive tables
library(ggthemes) # custom pre-built themes
library(bbplot) # more themes
library(ggtext) # custom text color
library(ggforce) # better annotations
library(ggridges) # many distributions at once
library(ggrepel) # better labels
library(ggbeeswarm) # beeswarm plots
library(extrafont) # for extra fonts
library(RCurl)
library(xml2)
library(rvest)
library(jsonlite)
library(foreach)
library(lubridate)
library(snakecase)
library(devtools)
library(tidyverse)
library(RMariaDB)
library(DBI)
library(readr)
library(pander)
library(dplyr)
library(na.tools)
library(ggimage)
library(teamcolors) # NFL team colors and logos
library(plyr)
library(readr)
library(glue)
##library(animate)
library(animation)
library(tictoc)
library(gt) # beautiful tables
library(DT) # beautiful interactive tables
library(ggthemes) # custom pre-built themes
library(bbplot) # more themes
library(ggtext) # custom text color
library(ggforce) # better annotations
library(ggridges) # many distributions at once
library(ggrepel) # better labels
library(ggbeeswarm) # beeswarm plots
library(extrafont) # for extra fonts
library(RCurl)
library(xml2)
library(rvest)
library(jsonlite)
library(foreach)
library(lubridate)
library(snakecase)
schedule %>% dplyr::filter(game_date = Sys.Date())
schedule %>% dplyr::filter(game_date == Sys.Date())
schedule$game_date %>% dplyr::filter(Sys.Date())
schedule$game_date %>% dplyr::filter(Sys.Date())
schedule$game_date
Sys.Date()
schedule %>% filter(schedule, game_date = Sys.Date())
filter(schedule, game_date = Sys.Date())
View(schedule)
filter(schedule, game_date = Sys.Date())
rlang::last_error()
schedule$game_date = Sys.Date()
View(schedule)
today <- schedule %>%
filter(game_date = Sys.Date())
today <- schedule$game_date = Sys.Date()
tm(today())
rm(today())
rm(today)
View(schedule)
Sys.Date()
schedule
tibble(schedule)
schedule %>% filter(games_date == Sys.Date())
schedule %>% filter(game_date == Sys.Date())
schedule <- read.csv(file = fschedule)
tibble(schedule)
schedule %>% filter(game_date = Sys.Date())
schedule %>% filter(game_date, Sys.Date())
?filter
schedule %>% filter(game_date == paste(Sys.Date()))
schedule %>% filter(game_date == str(Sys.Date())
)
schedule %>% filter(game_date == paste(Sys.Date()))
today <- schedule %>% filter(game_date == paste(Sys.Date()))
userDate <- Sys.Date()
today <- schedule %>%
filter(game_date == userDate)
class(userDate)
class(today)
class(userDate)
today <- schedule %>%
filter(game_date == paste(Sys.Date()))
today
schedule <- read.csv(file = fschedule)
tibble(schedule)
today <- schedule %>%
filter(game_date == paste(Sys.Date()))
today
tibble(today)
library(RCurl); library(xml2); library(rvest); library(jsonlite); library(foreach)
library(lubridate)
library(tidyverse)
source("EH_scrape_functions.R")
game_ids <- as.character(seq(2019020001, 2019020100, by = 1))
x <- 1
fschedule <- paste("schedule/", userYear, "schedule.csv", sep = "")
schedule <- sc.scrape_schedule(start_date = paste(userYear, "-10-01", sep = ""), end_date = paste(userYear + 1, "-07-01", sep = ""), print_sched = TRUE)
write.csv(schedule, file = fschedule, row.names = FALSE)
x <- sc.scrape_pbp(games = 2019021037)
pbp_scrape <- x
rm(x)
game_info_df_new <-     pbp_scrape$game_info_df       ## game information data
pbp_base_new <-         pbp_scrape$pbp_base           ## main play-by-play data
pbp_extras_new <-       pbp_scrape$pbp_extras         ## extra play-by-play data
player_shifts_new <-    pbp_scrape$player_shifts      ## full player shifts data
player_periods_new <-   pbp_scrape$player_periods     ## player TOI sums per period
roster_df_new <-        pbp_scrape$roster_df          ## roster data
scratches_df_new <-     pbp_scrape$scratches_df       ## scratches data
event_summary_df_new <- pbp_scrape$events_summary_df  ## event summary data
scrape_report <-        pbp_scrape$report             ## scrape report
game_info_df_new
pkgs <- c("RCurl", "xml2", "rvest",
"jsonlite", "foreach", "lubridate",
"tidyverse")
installed_packages <- pkgs %in%
rownames(installed.packages())
if (any(installed_packages == FALSE)) {
install.packages(pkgs[!installed_packages])
}
invisible(lapply(pkgs, library, character.only = TRUE))
source("EH_scrape_functions.R")
scrape_games <- function(xscrape) {
x <- xscrape
pbp_scrape <- sc.scrape_pbp(games = x)
game_info_df_new <-       pbp_scrape$game_info_df       ## game information data
pbp_base_new <-           pbp_scrape$pbp_base           ## main play-by-play data
pbp_extras_new <-         pbp_scrape$pbp_extras         ## extra play-by-play data
player_shifts_new <-      pbp_scrape$player_shifts      ## full player shifts data
player_periods_new <-     pbp_scrape$player_periods     ## player TOI sums per period
roster_df_new <-          pbp_scrape$roster_df          ## roster data
scratches_df_new <-       pbp_scrape$scratches_df       ## scratches data
events_summary_df_new <-  pbp_scrape$events_summary_df  ## event summary data
report_new <-             pbp_scrape$report             ## scrape report
df_new <- c(game_info_df_new, pbp_base_new, pbp_extras_new,
player_shifts_new, player_periods_new, roster_df_new,
scratches_df_new, events_summary_df_new, report_new)
game_info_df_new <- game_info_df_new %>%
mutate(game_id = as.numeric(game_id), season = as.numeric(season))
pbp_base_new <- pbp_base_new %>%
mutate(game_id = as.numeric(game_id),
season = as.numeric(season),
home_on_7 = as.logical(home_on_7),
away_on_7 = as.logical(away_on_7))
pbp_extras_new <- pbp_extras_new %>%
mutate(game_id = as.numeric(game_id))
player_shifts_new <- player_shifts_new %>%
mutate(game_id = as.numeric(game_id), season = as.numeric(season))
player_periods_new <- player_periods_new %>%
mutate(game_id = as.numeric(game_id), season = as.numeric(season))
roster_df_new <- roster_df_new %>%
mutate(game_id = as.numeric(game_id), season = as.numeric(season))
scratches_df_new <- scratches_df_new %>%
mutate(game_id = as.numeric(game_id), season = as.numeric(season))
events_summary_df_new <- events_summary_df_new %>%
mutate(game_id = as.numeric(game_id), season = as.numeric(season))
report_new <- report_new %>%
mutate(game_id = as.numeric(game_id))
}
scrape.1 <- as.character(seq(2019020251, 2019020300))
scrape.1 <- scrape.1[!scrape.1%in%dead_games]
scrape.1)
scrape.1
scrape_games(scrape.1)
game_info_df_new
save_scrapes <- function() {
fgame_info_df <- paste("data/", userYear, "game_info_df", ".csv", sep = "")
fpbp_base <- paste("data/", userYear, "pbp_base", ".csv", sep = "")
fpbp_extras <- paste("data/", userYear, "pbp_extras", ".csv", sep = "")
fplayer_shifts <- paste("data/", userYear, "player_shifts", ".csv", sep = "")
fplayer_periods <- paste("data/", userYear, "player_periods", ".csv", sep = "")
froster_df <- paste("data/", userYear, "roster_df", ".csv", sep = "")
fscratches_df <- paste("data/", userYear, "scratches_df", ".csv", sep = "")
fevents_summary_df <- paste("data/", userYear, "events_summary_df", ".csv", sep = "")
freport <- paste("data/", userYear, "report", ".csv", sep = "")
flocations <- c(fgame_info_df, fpbp_base, fpbp_extras,
fplayer_shifts, fplayer_periods, froster_df,
fscratches_df, fevents_summary_df, freport)
game_info_df <-           read.csv(fgame_info_df)
pbp_base <-               read.csv(fpbp_base)
pbp_extras <-             read.csv(fpbp_extras)
player_shifts <-          read.csv(fplayer_shifts)
player_periods <-         read.csv(fplayer_periods)
roster_df <-              read.csv(froster_df)
scratches_df <-           read.csv(fscratches_df)
events_summary_df <-      read.csv(fevents_summary_df)
report <-                 read.csv(freport)
df <- c(game_info_df, pbp_base, pbp_extras,
player_shifts, player_periods, roster_df,
scratches_df, events_summary_df, report)
##  game_info_df <-       pbp_scrape$game_info_df       ## game information data
##  pbp_base <-           pbp_scrape$pbp_base           ## main play-by-play data
##  pbp_extras <-         pbp_scrape$pbp_extras         ## extra play-by-play data
##  player_shifts <-      pbp_scrape$player_shifts      ## full player shifts data
##  player_periods <-     pbp_scrape$player_periods     ## player TOI sums per period
##  roster_df <-          pbp_scrape$roster_df          ## roster data
##  scratches_df <-       pbp_scrape$scratches_df       ## scratches data
##  events_summary_df <-  pbp_scrape$events_summary_df  ## event summary data
##  report <-             pbp_scrape$report             ## scrape report
game_info_df <- dplyr::union(game_info_df, game_info_df_new)
pbp_base <- dplyr::union(pbp_base, pbp_base_new)
pbp_extras <- dplyr::union(pbp_extras, pbp_extras_new)
player_shifts <- dplyr::union(player_shifts, player_shifts_new)
player_periods <- dplyr::union(player_periods, player_periods_new)
roster_df <- dplyr::union(roster_df, roster_df_new)
scratches_df <- dplyr::union(scratches_df, scratches_df_new)
events_summary_df <- dplyr::union(events_summary_df, events_summary_df_new)
report <- dplyr::union(report, report_new)
write.csv(game_info_df, fgame_info_df, row.names = FALSE)
write.csv(pbp_base, fpbp_base, row.names = FALSE)
write.csv(pbp_extras, fpbp_extras, row.names = FALSE)
write.csv(player_shifts, fplayer_shifts, row.names = FALSE)
write.csv(player_periods, fplayer_periods, row.names = FALSE)
write.csv(roster_df, froster_df, row.names = FALSE)
write.csv(scratches_df, fscratches_df, row.names = FALSE)
write.csv(events_summary_df, fevents_summary_df, row.names = FALSE)
write.csv(report, freport, row.names = FALSE)
print(x)
}
save_scrapes <- function(x) {
fgame_info_df <- paste("data/", userYear, "game_info_df", ".csv", sep = "")
fpbp_base <- paste("data/", userYear, "pbp_base", ".csv", sep = "")
fpbp_extras <- paste("data/", userYear, "pbp_extras", ".csv", sep = "")
fplayer_shifts <- paste("data/", userYear, "player_shifts", ".csv", sep = "")
fplayer_periods <- paste("data/", userYear, "player_periods", ".csv", sep = "")
froster_df <- paste("data/", userYear, "roster_df", ".csv", sep = "")
fscratches_df <- paste("data/", userYear, "scratches_df", ".csv", sep = "")
fevents_summary_df <- paste("data/", userYear, "events_summary_df", ".csv", sep = "")
freport <- paste("data/", userYear, "report", ".csv", sep = "")
flocations <- c(fgame_info_df, fpbp_base, fpbp_extras,
fplayer_shifts, fplayer_periods, froster_df,
fscratches_df, fevents_summary_df, freport)
game_info_df <-           read.csv(fgame_info_df)
pbp_base <-               read.csv(fpbp_base)
pbp_extras <-             read.csv(fpbp_extras)
player_shifts <-          read.csv(fplayer_shifts)
player_periods <-         read.csv(fplayer_periods)
roster_df <-              read.csv(froster_df)
scratches_df <-           read.csv(fscratches_df)
events_summary_df <-      read.csv(fevents_summary_df)
report <-                 read.csv(freport)
df <- c(game_info_df, pbp_base, pbp_extras,
player_shifts, player_periods, roster_df,
scratches_df, events_summary_df, report)
##  game_info_df <-       pbp_scrape$game_info_df       ## game information data
##  pbp_base <-           pbp_scrape$pbp_base           ## main play-by-play data
##  pbp_extras <-         pbp_scrape$pbp_extras         ## extra play-by-play data
##  player_shifts <-      pbp_scrape$player_shifts      ## full player shifts data
##  player_periods <-     pbp_scrape$player_periods     ## player TOI sums per period
##  roster_df <-          pbp_scrape$roster_df          ## roster data
##  scratches_df <-       pbp_scrape$scratches_df       ## scratches data
##  events_summary_df <-  pbp_scrape$events_summary_df  ## event summary data
##  report <-             pbp_scrape$report             ## scrape report
game_info_df <- dplyr::union(game_info_df, game_info_df_new)
pbp_base <- dplyr::union(pbp_base, pbp_base_new)
pbp_extras <- dplyr::union(pbp_extras, pbp_extras_new)
player_shifts <- dplyr::union(player_shifts, player_shifts_new)
player_periods <- dplyr::union(player_periods, player_periods_new)
roster_df <- dplyr::union(roster_df, roster_df_new)
scratches_df <- dplyr::union(scratches_df, scratches_df_new)
events_summary_df <- dplyr::union(events_summary_df, events_summary_df_new)
report <- dplyr::union(report, report_new)
write.csv(game_info_df, fgame_info_df, row.names = FALSE)
write.csv(pbp_base, fpbp_base, row.names = FALSE)
write.csv(pbp_extras, fpbp_extras, row.names = FALSE)
write.csv(player_shifts, fplayer_shifts, row.names = FALSE)
write.csv(player_periods, fplayer_periods, row.names = FALSE)
write.csv(roster_df, froster_df, row.names = FALSE)
write.csv(scratches_df, fscratches_df, row.names = FALSE)
write.csv(events_summary_df, fevents_summary_df, row.names = FALSE)
write.csv(report, freport, row.names = FALSE)
print(x)
}
save_scrapes(scrape.1)
game_info_df_new
fgame_info_df <- paste("data/", userYear, "game_info_df", ".csv", sep = "")
fpbp_base <- paste("data/", userYear, "pbp_base", ".csv", sep = "")
fpbp_extras <- paste("data/", userYear, "pbp_extras", ".csv", sep = "")
fplayer_shifts <- paste("data/", userYear, "player_shifts", ".csv", sep = "")
fplayer_periods <- paste("data/", userYear, "player_periods", ".csv", sep = "")
froster_df <- paste("data/", userYear, "roster_df", ".csv", sep = "")
fscratches_df <- paste("data/", userYear, "scratches_df", ".csv", sep = "")
fevents_summary_df <- paste("data/", userYear, "events_summary_df", ".csv", sep = "")
freport <- paste("data/", userYear, "report", ".csv", sep = "")
## flocations <- c(fgame_info_df, fpbp_base, fpbp_extras,
##                fplayer_shifts, fplayer_periods, froster_df,
##                fscratches_df, fevents_summary_df, freport)
game_info_df <-           read.csv(fgame_info_df)
pbp_base <-               read.csv(fpbp_base)
pbp_extras <-             read.csv(fpbp_extras)
player_shifts <-          read.csv(fplayer_shifts)
player_periods <-         read.csv(fplayer_periods)
roster_df <-              read.csv(froster_df)
scratches_df <-           read.csv(fscratches_df)
events_summary_df <-      read.csv(fevents_summary_df)
report <-                 read.csv(freport)
game_info_df <- dplyr::union(game_info_df, game_info_df_new)
pbp_base <- dplyr::union(pbp_base, pbp_base_new)
pbp_extras <- dplyr::union(pbp_extras, pbp_extras_new)
player_shifts <- dplyr::union(player_shifts, player_shifts_new)
player_periods <- dplyr::union(player_periods, player_periods_new)
roster_df <- dplyr::union(roster_df, roster_df_new)
scratches_df <- dplyr::union(scratches_df, scratches_df_new)
events_summary_df <- dplyr::union(events_summary_df, events_summary_df_new)
report <- dplyr::union(report, report_new)
write.csv(game_info_df, fgame_info_df, row.names = FALSE)
write.csv(pbp_base, fpbp_base, row.names = FALSE)
write.csv(pbp_extras, fpbp_extras, row.names = FALSE)
write.csv(player_shifts, fplayer_shifts, row.names = FALSE)
write.csv(player_periods, fplayer_periods, row.names = FALSE)
write.csv(roster_df, froster_df, row.names = FALSE)
write.csv(scratches_df, fscratches_df, row.names = FALSE)
write.csv(events_summary_df, fevents_summary_df, row.names = FALSE)
write.csv(report, freport, row.names = FALSE)
